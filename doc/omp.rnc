#### OpenVAS Management Protocol (OMP)
####
#### Version: 4.0
####
#### The "management" protocol of the Open Vulnerability Assessment System.

### Preamble

start = command | response

command
  = authenticate
    | commands
    | create_agent
    | create_config
    | create_alert
    | create_filter
    | create_lsc_credential
    | create_note
    | create_override
    | create_port_list
    | create_port_range
    | create_report
    | create_report_format
    | create_schedule
    | create_slave
    | create_target
    | create_task
    | delete_agent
    | delete_config
    | delete_alert
    | delete_filter
    | delete_lsc_credential
    | delete_note
    | delete_override
    | delete_report
    | delete_port_list
    | delete_port_range
    | delete_report_format
    | delete_schedule
    | delete_slave
    | delete_target
    | delete_task
    | empty_trashcan
    | get_agents
    | get_configs
    | get_dependencies
    | get_alerts
    | get_filters
    | get_info
    | get_lsc_credentials
    | get_notes
    | get_nvts
    | get_nvt_families
    | get_nvt_feed_checksum
    | get_overrides
    | get_port_lists
    | get_preferences
    | get_reports
    | get_report_formats
    | get_results
    | get_schedules
    | get_settings
    | get_slaves
    | get_system_reports
    | get_target_locators
    | get_targets
    | get_tasks
    | get_version
    | help
    | modify_agent
    | modify_alert
    | modify_config
    | modify_filter
    | modify_lsc_credential
    | modify_note
    | modify_override
    | modify_port_list
    | modify_report
    | modify_report_format
    | modify_schedule
    | modify_setting
    | modify_slave
    | modify_target
    | modify_task
    | pause_task
    | restore
    | resume_or_start_task
    | resume_paused_task
    | resume_stopped_task
    | run_wizard
    | start_task
    | stop_task
    | test_alert
    | verify_agent
    | verify_report_format

response
  = authenticate_response
    | commands_response
    | create_agent_response
    | create_config_response
    | create_alert_response
    | create_filter_response
    | create_lsc_credential_response
    | create_note_response
    | create_override_response
    | create_port_list_response
    | create_port_range_response
    | create_report_response
    | create_report_format_response
    | create_schedule_response
    | create_slave_response
    | create_target_response
    | create_task_response
    | delete_agent_response
    | delete_config_response
    | delete_alert_response
    | delete_filter_response
    | delete_lsc_credential_response
    | delete_note_response
    | delete_override_response
    | delete_report_response
    | delete_port_list_response
    | delete_port_range_response
    | delete_report_format_response
    | delete_schedule_response
    | delete_slave_response
    | delete_target_response
    | delete_task_response
    | empty_trashcan_response
    | get_agents_response
    | get_configs_response
    | get_dependencies_response
    | get_alerts_response
    | get_filters_response
    | get_info_response
    | get_lsc_credentials_response
    | get_notes_response
    | get_nvts_response
    | get_nvt_families_response
    | get_nvt_feed_checksum_response
    | get_overrides_response
    | get_port_lists_response
    | get_preferences_response
    | get_reports_response
    | get_report_formats_response
    | get_results_response
    | get_schedules_response
    | get_settings_response
    | get_slaves_response
    | get_system_reports_response
    | get_target_locators_response
    | get_targets_response
    | get_tasks_response
    | get_version_response
    | help_response
    | modify_agent_response
    | modify_alert_response
    | modify_config_response
    | modify_filter_response
    | modify_lsc_credential_response
    | modify_note_response
    | modify_override_response
    | modify_port_list_response
    | modify_report_response
    | modify_report_format_response
    | modify_schedule_response
    | modify_setting_response
    | modify_slave_response
    | modify_target_response
    | modify_task_response
    | pause_task_response
    | restore_response
    | resume_or_start_task_response
    | resume_paused_task_response
    | resume_stopped_task_response
    | run_wizard_response
    | start_task_response
    | stop_task_response
    | test_alert_response
    | verify_agent_response
    | verify_report_format_response

### Data Types

# A specifier of actions: get, modify, use.
actions = xsd:token { pattern = "[gmu]{1,3}" }
# Base64 encoded data.
base64 = xsd:base64Binary
# A true or false value.
boolean = text
# A true or false value, after conversion to an integer.
boolean_atoi = text
# A date and time, in the C `ctime' format.
ctime = text
# A name of a data type.
type_name = xsd:Name
# An integer.
integer = xsd:integer
# A date and time, in ISO 8601 format.
iso_time = text
# A string that may include the characters h, m, l, g and d.
levels = xsd:token { pattern = "h?m?l?g?d?" }
# A name.
name = xsd:string
# A port.
port = xsd:token { pattern = "[0-9]{1,5}" }
# A space separated list of users.
user_list = text
# An Object Identifier (OID).
oid = xsd:token { pattern = "[0-9\.]{1,80}" }
# A string describing an order for sorting.
sort_order = text
# The success or failure status of a command.
status = xsd:token { pattern = "200|201|202|400|401|403|404|409|500|503" }
# A task run status.
task_status = xsd:token { pattern = "Delete Requested|Done|New|Pause Requested|Paused|Requested|Resume Requested|Running|Stop Requested|Stopped|Internal Error" }
# The trend of results for a task.
task_trend = xsd:token { pattern = "up|down|more|less|same" }
# A threat level.
threat = xsd:token { pattern = "High|Medium|Low|Log|Debug" }
# A unit of time.
time_unit = xsd:token { pattern = "second|minute|hour|day|week|month|year|decade" }
# A Universally Unique Identifier (UUID).
uuid = xsd:token { pattern = "[0-9abcdefABCDEF\-]{1,40}" }
# A Universally Unique Identifier (UUID), or the empty string.
uuid_or_empty = xsd:token { pattern = "[0-9abcdefABCDEF\-]{0,40}" }

### Element Types

## Element Type c
##
## A reference to a command.

c
 = element c
     {
       text
     }

## Element Type e
##
## A reference to an element.

e
 = element e
     {
       text
     }

## Element Type r
##
## A reference to a response.

r
 = element r
     {
       text
     }

## Element Type o
##
## An optional pattern item.

o
 = element o
     {
       ( c
           | e
           | r
           | g )
     }

## Element Type g
##
## A group of pattern items.

g
 = element g
     {
       c*
       & e*
       & r*
       & o*
       & any*
     }

## Element Type any
##
## Pattern item indicating "any number of".

any
 = element any
     {
       ( c
           | e
           | r
           | g )
     }

## Element Type pattern
##
## The pattern element of a command or command descendant.

pattern
 = element pattern
     {
       text
       & pattern_attrib*
       & c*
       & e*
       & r*
       & o*
       & g*
       & any*
       & pattern_t?
     }

# An attribute.
pattern_attrib
 = element attrib
     {
       pattern_attrib_name
       & pattern_attrib_type
       & pattern_attrib_required
     }

pattern_attrib_name
 = element name
     {
       type_name
     }

pattern_attrib_type
 = element type
     {
       type_name
     }

pattern_attrib_required
 = element required
     {
       boolean
     }

# The type of the text of the element.
pattern_t
 = element t
     {
       type_name
     }

## Element Type command_definition
##
## Definition of a command in OMP describing HELP command.

command_definition
 = element command_definition
     {
       command_definition_name
       & command_definition_summary?
       & command_definition_description?
       & ( ( command_definition_pattern
           & command_definition_response )
           | ( command_definition_type
           & command_definition_ele* ) )
       & command_definition_example*
     }

# The name of the command.
command_definition_name
 = element name
     {
       type_name
     }

# A summary of the command.
command_definition_summary
 = element summary
     {
       text
     }

# A description of the command.
command_definition_description
 = element description
     {
       text
       & command_definition_description_p*
     }

# A paragraph.
command_definition_description_p
 = element p
     {
       text
     }

command_definition_pattern
 = element pattern    # type pattern
     {
       text
       & pattern_attrib*
       & c*
       & e*
       & r*
       & o*
       & g*
       & any*
       & pattern_t?
     }

command_definition_response
 = element response    # type pattern
     {
       text
       & pattern_attrib*
       & c*
       & e*
       & r*
       & o*
       & g*
       & any*
       & pattern_t?
     }

command_definition_example
 = element example
     {
       command_definition_example_summary?
       & command_definition_example_description?
       & command_definition_example_request
       & command_definition_example_response
     }

command_definition_example_summary
 = element summary
     {
       text
     }

command_definition_example_description
 = element description
     {
       text
     }

# Example request.
command_definition_example_request
 = element request
     {
       text
     }

# Response to example request.
command_definition_example_response
 = element response
     {
       text
     }

# The type of the element.
command_definition_type
 = element type
     {
       text
     }

# An element.
command_definition_ele
 = element ele    # type command_definition
     {
       command_definition_name
       & command_definition_summary?
       & command_definition_description?
       & ( ( command_definition_pattern
           & command_definition_response )
           | ( command_definition_type
           & command_definition_ele* ) )
       & command_definition_example*
     }

## Element Type result_notes
##
## Notes on a result.

result_notes
 = element result_notes
     {
       result_notes_note*
     }

result_notes_note
 = element note
     {
       result_notes_note_nvt
       & result_notes_note_text
       & result_notes_note_orphan
     }

result_notes_note_nvt
 = element nvt
     {
       attribute oid { oid }
       & result_notes_note_nvt_name
     }

result_notes_note_nvt_name
 = element name
     {
       name
     }

# The text of the note.
result_notes_note_text
 = element text
     {
       text
       & attribute excerpt { boolean }
     }

# Whether the note is an orphan.
result_notes_note_orphan
 = element orphan
     {
       boolean
     }

## Element Type result_overrides
##
## Overrides on a result.

result_overrides
 = element result_overrides
     {
       result_overrides_override*
     }

result_overrides_override
 = element override
     {
       result_overrides_override_nvt
       & result_overrides_override_text
       & result_overrides_override_threat
       & result_overrides_override_new_threat
       & result_overrides_override_orphan
     }

result_overrides_override_nvt
 = element nvt
     {
       attribute oid { oid }
       & result_overrides_override_nvt_name
     }

result_overrides_override_nvt_name
 = element name
     {
       name
     }

# The text of the override.
result_overrides_override_text
 = element text
     {
       text
       & attribute excerpt { boolean }
     }

# Threat level to which override applies.
result_overrides_override_threat
 = element threat
     {
       threat
     }

# New threat for result.
result_overrides_override_new_threat
 = element new_threat
     {
       threat
     }

# Whether the override is an orphan.
result_overrides_override_orphan
 = element orphan
     {
       boolean
     }

## Element Type result
##
## A result.

result
 = element result
     {
       attribute id { uuid }
       & result_subnet
       & result_host
       & result_port
       & result_nvt
       & result_threat
       & result_original_threat?
       & result_description
       & result_delta?
       & result_details
       & result_detection
       & result_notes?
       & result_overrides?
     }

result_subnet
 = element subnet
     {
       text
     }

result_host
 = element host
     {
       text
     }

result_port
 = element port
     {
       text
     }

# NVT to which result applies.
result_nvt
 = element nvt
     {
       attribute oid { oid }
       & result_nvt_name
       & result_nvt_family
       & result_nvt_cvss_base
       & result_nvt_risk_factor
       & result_nvt_cve
       & result_nvt_bid
       & result_nvt_tags
       & result_nvt_cert
       & result_nvt_xref
     }

# The name of the NVT.
result_nvt_name
 = element name
     {
       name
     }

# The family the NVT is in.
result_nvt_family
 = element family
     {
       name
     }

# CVSS base value associated with the NVT.
result_nvt_cvss_base
 = element cvss_base
     {
       integer
     }

# Risk factor associated with the NVT.
result_nvt_risk_factor
 = element risk_factor
     {
       integer
     }

# CVE associated with the NVT.
result_nvt_cve
 = element cve
     {
       text
     }

# BID associated with the NVT.
result_nvt_bid
 = element bid
     {
       text
     }

# Tags associated with the NVT.
result_nvt_tags
 = element tags
     {
       text
     }

# List of CERT advisories associated with the NVT.
result_nvt_cert
 = element cert
     {
       text
     }

# XREFs associated with the NVT.
result_nvt_xref
 = element xref
     {
       text
     }

result_threat
 = element threat
     {
       threat
     }

# Threat when overridden.
result_original_threat
 = element original_threat
     {
       threat
     }

# Description of the result.
result_description
 = element description
     {
       text
     }

# Delta state.
result_delta
 = element delta
     {
       text
       & result_delta_result?
       & result_delta_diff?
       & result_delta_notes?
       & result_delta_overrides?
     }

# Delta result.
result_delta_result
 = element result    # type result
     {
       attribute id { uuid }
       & result_subnet
       & result_host
       & result_port
       & result_nvt
       & result_threat
       & result_original_threat?
       & result_description
       & result_delta?
       & result_details
       & result_detection
       & result_notes?
       & result_overrides?
     }

# Comparison between descriptions.
result_delta_diff
 = element diff    # type text
     {
     }

result_delta_notes
 = element notes    # type result_notes
     {
       result_notes_note*
     }

result_delta_overrides
 = element overrides    # type result_overrides
     {
       result_overrides_override*
     }

# Any details associated with the result.
result_details
 = element details
     {
       result_details_detail*
     }

# A detail associated with the result.
result_details_detail
 = element detail
     {
       result_details_detail_name
       & result_details_detail_value
     }

# The name of the detail.
result_details_detail_name
 = element name
     {
       text
     }

# The value of the detail.
result_details_detail_value
 = element value
     {
       text
     }

# Detection details.
result_detection
 = element detection
     {
       result_detection_result
     }

# Detection result.
result_detection_result
 = element result    # type result
     {
       attribute id { uuid }
       & result_subnet
       & result_host
       & result_port
       & result_nvt
       & result_threat
       & result_original_threat?
       & result_description
       & result_delta?
       & result_details
       & result_detection
       & result_notes?
       & result_overrides?
     }

result_notes
 = element notes    # type result_notes
     {
       result_notes_note*
     }

result_overrides
 = element overrides    # type result_overrides
     {
       result_overrides_override*
     }

## Element Type report
##
## Actually attributes and either base64 or a report.

report
 = element report
     {
       text # RNC limitation: base64
       & attribute id { uuid }
       & attribute format_id { uuid }
       & attribute extension { text }
       & attribute content_type { text }
       & attribute type { xsd:token { pattern = "scan|assets" } }?
       & report_report
     }

report_report
 = element report
     {
       attribute id { uuid }
       & attribute type { xsd:token { pattern = "scan|assets" } }?
       & report_report_report_format
       & report_report_delta?
       & ( report_report_sort
           & report_report_filters
           & report_report_scan_run_status
           & report_report_result_count
           & report_report_host_count?
           & report_report_task
           & report_report_ports
           & report_report_results
           & report_report_hosts?
           & report_report_host*
           & report_report_scan_start
           & report_report_host_start*
           & report_report_host_end*
           & report_report_scan_end )?
     }

report_report_report_format
 = element report_format
     {
       report_report_report_format_param
     }

# Report format parameter.
report_report_report_format_param
 = element param
     {
       report_report_report_format_param_name
       & report_report_report_format_param_value
     }

# Parameter name.
report_report_report_format_param_name
 = element name
     {
       text
     }

# Parameter value.
report_report_report_format_param_value
 = element value
     {
       text
     }

report_report_delta
 = element delta
     {
       report_report_delta_report
     }

# Second report, for delta reports.
report_report_delta_report
 = element report
     {
       attribute id { uuid }
       & report_report_delta_report_scan_run_status
       & report_report_delta_report_scan_start
       & report_report_delta_report_scan_end
     }

# Run status of task scan at time of report.
report_report_delta_report_scan_run_status
 = element scan_run_status
     {
       task_status
     }

# Start time of scan.
report_report_delta_report_scan_start
 = element scan_start
     {
       iso_time
     }

# End time of scan.
report_report_delta_report_scan_end
 = element scan_end
     {
       iso_time
     }

# Result sorting information.
report_report_sort
 = element sort
     {
       report_report_sort_field
     }

# Sort field.
report_report_sort_field
 = element field
     {
       text
       & report_report_sort_field_order
     }

# Sort order of field.
report_report_sort_field_order
 = element order
     {
       xsd:token { pattern = "ascending|descending" }
     }

# Result filtering information.
report_report_filters
 = element filters
     {
       text # RNC limitation: levels
       & # Filter used if any, else 0.
       attribute id { uuid }?
       & report_report_filters_term
       & report_report_filters_phrase
       & report_report_filters_notes
       & report_report_filters_overrides
       & report_report_filters_apply_overrides
       & report_report_filters_result_hosts_only
       & report_report_filters_min_cvss_base
       & report_report_filters_autofp
       & report_report_filters_show_closed_cves
       & report_report_filters_filter*
       & report_report_filters_host?
       & report_report_filters_delta?
     }

# Filter term.
report_report_filters_term
 = element term
     {
       text
     }

# Search phrase.
report_report_filters_phrase
 = element phrase
     {
       text
     }

# Whether notes are included.
report_report_filters_notes
 = element notes
     {
       xsd:token { pattern = "0|1" }
     }

# Whether overrides are included.
report_report_filters_overrides
 = element overrides
     {
       xsd:token { pattern = "0|1" }
     }

# Whether overrides are applied.
report_report_filters_apply_overrides
 = element apply_overrides
     {
       xsd:token { pattern = "0|1" }
     }

# Whether only those hosts that have results are included.
report_report_filters_result_hosts_only
 = element result_hosts_only
     {
       xsd:token { pattern = "0|1" }
     }

# Minimum CVSS base if in effect, else empty string.
report_report_filters_min_cvss_base
 = element min_cvss_base
     {
       text
     }

# Whether to trust vendor security updates. 1 full match, 2 partial.
report_report_filters_autofp
 = element autofp
     {
       xsd:token { pattern = "0|1|2" }
     }

# Whether to include the Closed CVEs host detail in the report.
report_report_filters_show_closed_cves
 = element show_closed_cves    # type boolean
     {
     }

# Level filter.
report_report_filters_filter
 = element filter
     {
       xsd:token { pattern = "High|Medium|Low|Log|Debug" }
     }

report_report_filters_host
 = element host
     {
       report_report_filters_host_ip
     }

# IP of single host in report (for "delta" and "prognostic").
report_report_filters_host_ip
 = element ip
     {
       text
     }

# Delta states.
report_report_filters_delta
 = element delta
     {
       text
       & report_report_filters_delta_changed
       & report_report_filters_delta_gone
       & report_report_filters_delta_new
       & report_report_filters_delta_same
     }

# Whether changed results are included.
report_report_filters_delta_changed
 = element changed
     {
       boolean
     }

# Whether results that have vanished are included.
report_report_filters_delta_gone
 = element gone
     {
       boolean
     }

# Whether new results are included.
report_report_filters_delta_new
 = element new
     {
       boolean
     }

# Whether results that are equal are included.
report_report_filters_delta_same
 = element same
     {
       boolean
     }

# Run status of task scan at time of report.
report_report_scan_run_status
 = element scan_run_status
     {
       task_status
     }

# Counts of results produced by scan.
report_report_result_count
 = element result_count
     {
       text
       & report_report_result_count_full
       & report_report_result_count_filtered
       & report_report_result_count_debug
       & report_report_result_count_hole
       & report_report_result_count_info
       & report_report_result_count_log
       & report_report_result_count_warning
     }

# Total number of results produced by scan.
report_report_result_count_full
 = element full
     {
       integer
     }

# Number of results after filtering.
report_report_result_count_filtered
 = element filtered
     {
       integer
     }

# Number of "debug" results (threat level Debug).
report_report_result_count_debug
 = element debug
     {
       report_report_result_count_debug_full
       & report_report_result_count_debug_filtered
     }

# Total number of results.
report_report_result_count_debug_full
 = element full
     {
       integer
     }

# Number of results after filtering.
report_report_result_count_debug_filtered
 = element filtered
     {
       integer
     }

# Number of "hole" results (threat level High).
report_report_result_count_hole
 = element hole
     {
       report_report_result_count_hole_full
       & report_report_result_count_hole_filtered
     }

# Total number of results.
report_report_result_count_hole_full
 = element full
     {
       integer
     }

# Number of results after filtering.
report_report_result_count_hole_filtered
 = element filtered
     {
       integer
     }

# Number of "info" results (threat level Low).
report_report_result_count_info
 = element info
     {
       report_report_result_count_info_full
       & report_report_result_count_info_filtered
     }

# Total number of results.
report_report_result_count_info_full
 = element full
     {
       integer
     }

# Number of results after filtering.
report_report_result_count_info_filtered
 = element filtered
     {
       integer
     }

# Number of "log" results (threat level Log).
report_report_result_count_log
 = element log
     {
       report_report_result_count_log_full
       & report_report_result_count_log_filtered
     }

# Total number of results.
report_report_result_count_log_full
 = element full
     {
       integer
     }

# Number of results after filtering.
report_report_result_count_log_filtered
 = element filtered
     {
       integer
     }

# Number of "warning" results (threat level Medium).
report_report_result_count_warning
 = element warning
     {
       report_report_result_count_warning_full
       & report_report_result_count_warning_filtered
     }

# Total number of results.
report_report_result_count_warning_full
 = element full
     {
       integer
     }

# Number of results after filtering.
report_report_result_count_warning_filtered
 = element filtered
     {
       integer
     }

# Counts of hosts in the results.
report_report_host_count
 = element host_count
     {
       report_report_host_count_full
       & report_report_host_count_filtered
     }

# Total number of hosts.
report_report_host_count_full
 = element full
     {
       integer
     }

# Number of hosts after filtering.
report_report_host_count_filtered
 = element filtered
     {
       integer
     }

report_report_task
 = element task
     {
       attribute id { uuid }
       & report_report_task_name
       & report_report_task_target
     }

# The name of the task.
report_report_task_name
 = element name
     {
       name
     }

# The target of the task.
report_report_task_target
 = element target
     {
       attribute id { uuid }
       & report_report_task_target_trash
     }

report_report_task_target_trash
 = element trash
     {
       boolean
     }

report_report_ports
 = element ports
     {
       attribute start { integer }
       & attribute max { integer }
       & report_report_ports_port*
     }

report_report_ports_port
 = element port
     {
       text
       & report_report_ports_port_host
       & report_report_ports_port_threat
     }

report_report_ports_port_host
 = element host
     {
       text
     }

report_report_ports_port_threat
 = element threat
     {
       threat
     }

report_report_results
 = element results
     {
       attribute start { integer }
       & attribute max { integer }
       & report_report_results_result*
     }

# A result.
report_report_results_result
 = element result    # type result
     {
       attribute id { uuid }
       & result_subnet
       & result_host
       & result_port
       & result_nvt
       & result_threat
       & result_original_threat?
       & result_description
       & result_delta?
       & result_details
       & result_detection
       & result_notes?
       & result_overrides?
     }

report_report_hosts
 = element hosts
     {
       attribute start { integer }
       & attribute max { integer }
     }

report_report_host
 = element host
     {
       report_report_host_ip
       & report_report_host_start
       & report_report_host_end
       & report_report_host_detail*
     }

# IP of the host.
report_report_host_ip
 = element ip
     {
       text
     }

# Scan start time for this host.
report_report_host_start
 = element start
     {
       text
     }

# Scan end time for this host.
report_report_host_end
 = element end
     {
       text
     }

# A detail associated with the host.
report_report_host_detail
 = element detail
     {
       report_report_host_detail_name
       & report_report_host_detail_value
       & report_report_host_detail_source
     }

# The name of the detail.
report_report_host_detail_name
 = element name
     {
       text
     }

# The value of the detail.
report_report_host_detail_value
 = element value
     {
       text
     }

# Where the detail comes from.
report_report_host_detail_source
 = element source
     {
       report_report_host_detail_source_type
       & report_report_host_detail_source_name
       & report_report_host_detail_source_description
     }

# The type of the detail source.
report_report_host_detail_source_type
 = element type
     {
       text
     }

# The name of the detail source.
report_report_host_detail_source_name
 = element name
     {
       text
     }

# A description of the detail source.
report_report_host_detail_source_description
 = element description
     {
       text
     }

# Start time of scan.
report_report_scan_start
 = element scan_start
     {
       iso_time
     }

# Start time of a particular host.
report_report_host_start
 = element host_start
     {
       text # RNC limitation: iso_time
       & report_report_host_start_host
     }

report_report_host_start_host
 = element host
     {
       text
     }

# End time of a particular host.
report_report_host_end
 = element host_end
     {
       text # RNC limitation: iso_time
       & report_report_host_end_host
     }

report_report_host_end_host
 = element host
     {
       text
     }

# End time of scan.
report_report_scan_end
 = element scan_end
     {
       iso_time
     }

### Commands

## Command authenticate
##
## Authenticate with the manager.

authenticate
 = element authenticate
     {
       authenticate_credentials
     }

authenticate_credentials
 = element credentials
     {
       authenticate_credentials_username
       & authenticate_credentials_password
     }

# The login name of the user.
authenticate_credentials_username
 = element username
     {
       text
     }

# The user's password.
authenticate_credentials_password
 = element password
     {
       text
     }

## Command commands
##
## Run a list of commands.

commands
 = element commands
     {
       ( authenticate
           | commands
           | create_agent
           | create_alert
           | create_config
           | create_filter
           | create_lsc_credential
           | create_note
           | create_override
           | create_port_list
           | create_port_range
           | create_report_format
           | create_schedule
           | create_slave
           | create_target
           | create_task
           | delete_agent
           | delete_alert
           | delete_config
           | delete_filter
           | delete_lsc_credential
           | delete_note
           | delete_override
           | delete_report
           | delete_report_format
           | delete_port_list
           | delete_port_range
           | delete_schedule
           | delete_slave
           | delete_target
           | delete_task
           | empty_trashcan
           | get_agents
           | get_alerts
           | get_configs
           | get_dependencies
           | get_filters
           | get_info
           | get_lsc_credentials
           | get_notes
           | get_nvts
           | get_nvt_families
           | get_nvt_feed_checksum
           | get_overrides
           | get_port_lists
           | get_preferences
           | get_reports
           | get_report_formats
           | get_results
           | get_schedules
           | get_settings
           | get_slaves
           | get_system_reports
           | get_target_locators
           | get_targets
           | get_tasks
           | get_version
           | help
           | modify_agent
           | modify_alert
           | modify_config
           | modify_filter
           | modify_lsc_credential
           | modify_note
           | modify_override
           | modify_port_list
           | modify_report
           | modify_schedule
           | modify_setting
           | modify_slave
           | modify_target
           | modify_task
           | pause_task
           | restore
           | resume_or_start_task
           | resume_paused_task
           | resume_stopped_task
           | run_wizard
           | start_task
           | stop_task
           | test_alert )*
     }

## Command create_agent
##
## Create an agent.

create_agent
 = element create_agent
     {
       create_agent_installer
       & create_agent_name
       & create_agent_comment?
       & create_agent_howto_install?
       & create_agent_howto_use?
     }

# A file that installs the agent on a target machine.
create_agent_installer
 = element installer
     {
       text # RNC limitation: base64
       & create_agent_installer_signature
     }

# A detached OpenPGP signature of the installer.
create_agent_installer_signature
 = element signature
     {
       base64
     }

# A name for the installer.
create_agent_name
 = element name
     {
       name
     }

# A comment on the agent.
create_agent_comment
 = element comment
     {
       text
     }

# A file that describes how to install the agent.
create_agent_howto_install
 = element howto_install
     {
       base64
     }

# A file that describes how to use the agent.
create_agent_howto_use
 = element howto_use
     {
       base64
     }

## Command create_config
##
## Create a config.

create_config
 = element create_config
     {
       create_config_comment?
       & ( create_config_copy
           | get_configs_response
           | create_config_rcfile )
       & create_config_name
     }

# A comment on the config.
create_config_comment
 = element comment
     {
       text
     }

# The UUID of an existing config.
create_config_copy
 = element copy
     {
       uuid
     }

# An openvasrc style file that defines the config.
create_config_rcfile
 = element rcfile
     {
       base64
     }

# A name for the config.
create_config_name
 = element name
     {
       name
     }

## Command create_alert
##
## Create an alert.

create_alert
 = element create_alert
     {
       create_alert_name
       & create_alert_comment?
       & create_alert_condition
       & create_alert_event
       & create_alert_method
       & create_alert_filter
     }

# A name for the alert.
create_alert_name
 = element name
     {
       name
     }

# A comment on the alert.
create_alert_comment
 = element comment
     {
       text
     }

# The condition that must be satisfied for the alert to occur.
create_alert_condition
 = element condition
     {
       text
       & create_alert_condition_data*
     }

# Some data that defines the condition.
create_alert_condition_data
 = element data
     {
       text
       & create_alert_condition_data_name
     }

# The name of the condition data.
create_alert_condition_data_name
 = element name
     {
       text
     }

# The event that must happen for the alert to occur.
create_alert_event
 = element event
     {
       text
       & create_alert_event_data*
     }

# Some data that defines the event.
create_alert_event_data
 = element data
     {
       text
       & create_alert_event_data_name
     }

# The name of the event data.
create_alert_event_data_name
 = element name
     {
       text
     }

# The method by which the user is alerted.
create_alert_method
 = element method
     {
       text
       & create_alert_method_data*
     }

# Some data that defines the method.
create_alert_method_data
 = element data
     {
       text
       & create_alert_method_data_name
     }

# The name of the method data.
create_alert_method_data_name
 = element name
     {
       text
     }

# Filter to apply when executing alert.
create_alert_filter
 = element filter
     {
       attribute id { uuid }
     }

## Command create_filter
##
## Create a filter.

create_filter
 = element create_filter
     {
       create_filter_name
       & create_filter_comment?
       & create_filter_copy?
       & create_filter_term?
       & create_filter_type?
     }

# A name for the filter.
create_filter_name
 = element name
     {
       text # RNC limitation: name
       & create_filter_name_make_unique
     }

# Whether to append a unique suffix if the name already exists.
create_filter_name_make_unique
 = element make_unique
     {
       boolean
     }

# A comment on the filter.
create_filter_comment
 = element comment
     {
       text
     }

# The UUID of an existing filter.
create_filter_copy
 = element copy
     {
       uuid
     }

# Filter term.
create_filter_term
 = element term
     {
       text
     }

# Resource type.
create_filter_type
 = element type
     {
       text
     }

## Command create_lsc_credential
##
## Create an LSC credential.

create_lsc_credential
 = element create_lsc_credential
     {
       create_lsc_credential_name
       & create_lsc_credential_comment?
       & create_lsc_credential_key?
       & create_lsc_credential_login
       & create_lsc_credential_password?
     }

# A name for the LSC credential.
create_lsc_credential_name
 = element name
     {
       name
     }

# A comment on the LSC credential.
create_lsc_credential_comment
 = element comment
     {
       text
     }

create_lsc_credential_key
 = element key
     {
       create_lsc_credential_key_phrase
       & create_lsc_credential_key_private
       & create_lsc_credential_key_public
     }

# Key passphrase.
create_lsc_credential_key_phrase
 = element phrase
     {
       text
     }

# Private key.
create_lsc_credential_key_private
 = element private
     {
       text
     }

# Public key.
create_lsc_credential_key_public
 = element public
     {
       text
     }

# The user name of the credential.
create_lsc_credential_login
 = element login
     {
       text
     }

# The password for the credential login.
create_lsc_credential_password
 = element password
     {
       text
     }

## Command create_note
##
## Create a note.

create_note
 = element create_note
     {
       create_note_text
       & create_note_nvt
       & create_note_active?
       & create_note_comment?
       & create_note_copy?
       & create_note_hosts?
       & create_note_port?
       & create_note_result?
       & create_note_task?
       & create_note_threat?
     }

# The text of the note.
create_note_text
 = element text
     {
       text
     }

# NVT to which note applies.
create_note_nvt
 = element nvt
     {
       attribute oid { oid }
     }

# Seconds note will be active. -1 on always, 0 off.
create_note_active
 = element active
     {
       integer
     }

# A comment on the note.
create_note_comment
 = element comment
     {
       text
     }

# The UUID of an existing note.
create_note_copy
 = element copy
     {
       uuid
     }

# A textual list of hosts.
create_note_hosts
 = element hosts
     {
       text
     }

# Port to which note applies.
create_note_port
 = element port
     {
       text
     }

# Result to which note applies.
create_note_result
 = element result
     {
       attribute id { uuid }
     }

# Task to which note applies.
create_note_task
 = element task
     {
       attribute id { uuid }
     }

# Threat level to which note applies.
create_note_threat
 = element threat
     {
       threat
     }

## Command create_override
##
## Create an override.

create_override
 = element create_override
     {
       create_override_text
       & create_override_nvt
       & create_override_active?
       & create_override_comment?
       & create_override_copy?
       & create_override_hosts?
       & create_override_new_threat?
       & create_override_port?
       & create_override_result?
       & create_override_task?
       & create_override_threat?
     }

# The text of the override.
create_override_text
 = element text
     {
       text
     }

# Seconds override will be active. -1 on always, 0 off.
create_override_active
 = element active
     {
       integer
     }

# NVT to which override applies.
create_override_nvt
 = element nvt
     {
       attribute oid { oid }
     }

# A comment on the override.
create_override_comment
 = element comment
     {
       text
     }

# The UUID of an existing override.
create_override_copy
 = element copy
     {
       uuid
     }

# A textual list of hosts.
create_override_hosts
 = element hosts
     {
       text
     }

# New threat level for result.
create_override_new_threat
 = element new_threat
     {
       threat
     }

# Port to which override applies.
create_override_port
 = element port
     {
       text
     }

# Result to which override applies.
create_override_result
 = element result
     {
       attribute id { uuid }
     }

# Task to which override applies.
create_override_task
 = element task
     {
       attribute id { uuid }
     }

# Threat level to which override applies.
create_override_threat
 = element threat
     {
       threat
     }

## Command create_port_list
##
## Create a port list.

create_port_list
 = element create_port_list
     {
       create_port_list_name
       & create_port_list_comment?
       & create_port_list_port_range
       & get_port_lists_response
     }

# The name of the port list.
create_port_list_name
 = element name
     {
       name
     }

# A comment on the port list.
create_port_list_comment
 = element comment
     {
       text
     }

# Comma or newline separated list of ranges.
create_port_list_port_range
 = element port_range
     {
       text
     }

## Command create_port_range
##
## Create a port range.

create_port_range
 = element create_port_range
     {
       create_port_range_comment?
       & create_port_range_port_list
       & create_port_range_start
       & create_port_range_end
       & create_port_range_type
     }

# A comment on the port range.
create_port_range_comment
 = element comment
     {
       text
     }

# The port list to which to add the range.
create_port_range_port_list
 = element port_list
     {
       attribute id { uuid }
     }

# The first port in the range.
create_port_range_start
 = element start
     {
       port
     }

# The last port in the range.
create_port_range_end
 = element end
     {
       port
     }

# The type of the ports: TCP, UDP, ....
create_port_range_type
 = element type
     {
       text
     }

## Command create_report
##
## Create a report.

create_report
 = element create_report
     {
       create_report_report
       & create_report_task
     }

# A report wrapper, as in the GET_REPORTS response.
create_report_report
 = element report    # type report
     {
       text # RNC limitation: base64
       & attribute id { uuid }
       & attribute format_id { uuid }
       & attribute extension { text }
       & attribute content_type { text }
       & attribute type { xsd:token { pattern = "scan|assets" } }?
       & report_report
     }

# Task for report: id to use existing task, name to create new task.
create_report_task
 = element task
     {
       attribute id { uuid }?
       & create_report_task_name?
       & create_report_task_comment?
     }

# The name of the task.
create_report_task_name
 = element name
     {
       name
     }

# Comment for the new task.
create_report_task_comment
 = element comment
     {
       text
     }

## Command create_report_format
##
## Create a report format.

create_report_format
 = element create_report_format
     {
       get_report_formats_response
     }

## Command create_schedule
##
## Create a schedule.

create_schedule
 = element create_schedule
     {
       create_schedule_name
       & create_schedule_comment?
       & create_schedule_first_time
       & create_schedule_duration
       & create_schedule_period
     }

# A name for the schedule.
create_schedule_name
 = element name
     {
       name
     }

# A comment on the schedule.
create_schedule_comment
 = element comment
     {
       text
     }

# The first time the schedule will run.
create_schedule_first_time
 = element first_time
     {
       create_schedule_first_time_minute
       & create_schedule_first_time_hour
       & create_schedule_first_time_day_of_month
       & create_schedule_first_time_month
       & create_schedule_first_time_year
     }

create_schedule_first_time_minute
 = element minute
     {
       integer
     }

create_schedule_first_time_hour
 = element hour
     {
       integer
     }

create_schedule_first_time_day_of_month
 = element day_of_month
     {
       integer
     }

create_schedule_first_time_month
 = element month
     {
       integer
     }

create_schedule_first_time_year
 = element year
     {
       integer
     }

# How long the Manager will run the scheduled task for.
create_schedule_duration
 = element duration
     {
       create_schedule_duration_unit
     }

# Duration time unit.
create_schedule_duration_unit
 = element unit
     {
       time_unit
     }

# How often the Manager will repeat the scheduled task.
create_schedule_period
 = element period
     {
       create_schedule_period_unit
     }

# Period time unit.
create_schedule_period_unit
 = element unit
     {
       time_unit
     }

## Command create_slave
##
## Create a slave.

create_slave
 = element create_slave
     {
       create_slave_name
       & create_slave_comment?
       & create_slave_host
       & create_slave_port
       & create_slave_login
       & create_slave_password
     }

# A name for the slave.
create_slave_name
 = element name
     {
       name
     }

# A comment on the slave.
create_slave_comment
 = element comment
     {
       text
     }

# The host that the slave Manager is running on.
create_slave_host
 = element host
     {
       text
     }

# The port that the slave Manager is serving on the host.
create_slave_port
 = element port
     {
       text
     }

# Login name on the slave Manager.
create_slave_login
 = element login
     {
       text
     }

# Password for login on the slave Manager.
create_slave_password
 = element password
     {
       text
     }

## Command create_target
##
## Create a target.

create_target
 = element create_target
     {
       create_target_name
       & create_target_comment?
       & create_target_copy?
       & create_target_hosts
       & create_target_ssh_lsc_credential
       & create_target_smb_lsc_credential
       & create_target_target_locator
       & create_target_port_range?
       & create_target_port_list?
     }

# A name for the target.
create_target_name
 = element name
     {
       text # RNC limitation: name
       & create_target_name_make_unique
     }

# Whether to append a unique suffix if the name already exists.
create_target_name_make_unique
 = element make_unique
     {
       boolean
     }

# A comment on the target.
create_target_comment
 = element comment
     {
       text
     }

# The UUID of an existing target.
create_target_copy
 = element copy
     {
       uuid
     }

# A textual list of hosts, which may be empty.
create_target_hosts
 = element hosts
     {
       text
     }

# SSH login credentials for target.
create_target_ssh_lsc_credential
 = element ssh_lsc_credential
     {
       attribute id { uuid }
       & create_target_ssh_lsc_credential_port
     }

# The port the LSCs will use.
create_target_ssh_lsc_credential_port
 = element port
     {
       text
     }

# SMB login credentials for target.
create_target_smb_lsc_credential
 = element smb_lsc_credential
     {
       attribute id { uuid }
     }

# Target locator (for example, for LDAP).
create_target_target_locator
 = element target_locator
     {
       create_target_target_locator_username?
       & create_target_target_locator_password?
     }

# The login for the target locator.
create_target_target_locator_username
 = element username
     {
       text
     }

# The password for the target locator.
create_target_target_locator_password
 = element password
     {
       text
     }

# Port range for the target.
create_target_port_range
 = element port_range
     {
       text
     }

# Port list for the target.
create_target_port_list
 = element port_list
     {
       attribute id { uuid }
     }

## Command create_task
##
## Create a task.

create_task
 = element create_task
     {
       create_task_name
       & create_task_comment?
       & create_task_config
       & create_task_target
       & create_task_alert*
       & create_task_schedule?
       & create_task_slave?
       & create_task_observers?
       & create_task_preferences?
       & create_task_rcfile?
     }

# A name for the task.
create_task_name
 = element name
     {
       name
     }

# A comment on the task.
create_task_comment
 = element comment
     {
       text
     }

# The scan configuration used by the task.
create_task_config
 = element config
     {
       attribute id { uuid }
     }

# The hosts scanned by the task.
create_task_target
 = element target
     {
       attribute id { uuid }
     }

# An alert that applies to the task.
create_task_alert
 = element alert
     {
       attribute id { uuid }
     }

# When the task will run.
create_task_schedule
 = element schedule
     {
       attribute id { uuid }
     }

# Slave that the task will run on.
create_task_slave
 = element slave
     {
       attribute id { uuid }
     }

# Users allowed to observe this task.
create_task_observers
 = element observers
     {
       user_list
     }

create_task_preferences
 = element preferences
     {
       create_task_preferences_preference*
     }

create_task_preferences_preference
 = element preference
     {
       create_task_preferences_preference_scanner_name
       & create_task_preferences_preference_value
     }

# Compact name of preference, from scanner.
create_task_preferences_preference_scanner_name
 = element scanner_name
     {
       text
     }

create_task_preferences_preference_value
 = element value
     {
       text
     }

# An openvasrc style file defining the task.
create_task_rcfile
 = element rcfile
     {
       base64
     }

## Command delete_agent
##
## Delete an agent.

delete_agent
 = element delete_agent
     {
       attribute agent_id { uuid }
       & # Whether to remove entirely, or to the trashcan.
       attribute ultimate { boolean }
     }

## Command delete_config
##
## Delete a config.

delete_config
 = element delete_config
     {
       attribute config_id { uuid }
       & # Whether to remove entirely, or to the trashcan.
       attribute ultimate { boolean }
     }

## Command delete_alert
##
## Delete an alert.

delete_alert
 = element delete_alert
     {
       attribute alert_id { uuid }
       & # Whether to remove entirely, or to the trashcan.
       attribute ultimate { boolean }
     }

## Command delete_filter
##
## Delete a filter.

delete_filter
 = element delete_filter
     {
       attribute filter_id { uuid }
       & # Whether to remove entirely, or to the trashcan.
       attribute ultimate { boolean }
     }

## Command delete_lsc_credential
##
## Delete an LSC credential.

delete_lsc_credential
 = element delete_lsc_credential
     {
       attribute lsc_credential_id { uuid }
       & # Whether to remove entirely, or to the trashcan.
       attribute ultimate { boolean }
     }

## Command delete_note
##
## Delete a note.

delete_note
 = element delete_note
     {
       attribute note_id { uuid }
       & # Whether to remove entirely, or to the trashcan.
       attribute ultimate { boolean }
     }

## Command delete_override
##
## Delete an override.

delete_override
 = element delete_override
     {
       attribute override_id { uuid }
       & # Whether to remove entirely, or to the trashcan.
       attribute ultimate { boolean }
     }

## Command delete_report
##
## Delete a report.

delete_report
 = element delete_report
     {
       attribute report_id { uuid }
     }

## Command delete_port_list
##
## Delete a port list.

delete_port_list
 = element delete_port_list
     {
       attribute port_list_id { uuid }
       & # Whether to remove entirely, or to the trashcan.
       attribute ultimate { boolean }
     }

## Command delete_port_range
##
## Delete a port range.

delete_port_range
 = element delete_port_range
     {
       attribute port_range_id { uuid }
       & # Whether to remove entirely, or to the trashcan.
       attribute ultimate { boolean }
     }

## Command delete_report_format
##
## Delete a report format.

delete_report_format
 = element delete_report_format
     {
       attribute report_format_id { uuid }
       & # Whether to remove entirely, or to the trashcan.
       attribute ultimate { boolean }
     }

## Command delete_schedule
##
## Delete a schedule.

delete_schedule
 = element delete_schedule
     {
       attribute schedule_id { uuid }
       & # Whether to remove entirely, or to the trashcan.
       attribute ultimate { boolean }
     }

## Command delete_slave
##
## Delete a slave.

delete_slave
 = element delete_slave
     {
       attribute slave_id { uuid }
       & # Whether to remove entirely, or to the trashcan.
       attribute ultimate { boolean }
     }

## Command delete_target
##
## Delete a target.

delete_target
 = element delete_target
     {
       attribute target_id { uuid }
       & # Whether to remove entirely, or to the trashcan.
       attribute ultimate { boolean }
     }

## Command delete_task
##
## Delete a task.

delete_task
 = element delete_task
     {
       attribute task_id { uuid }
       & # Whether to remove entirely, or to the trashcan.
       attribute ultimate { boolean }
     }

## Command empty_trashcan
##
## Empty the trashcan.

empty_trashcan
 = element empty_trashcan
     {
       ""
     }

## Command get_agents
##
## Get all agents.

get_agents
 = element get_agents
     {
       # ID of single agent to get.
       attribute agent_id { uuid }?
       & # Filter term to use to filter query.
       attribute filter { uuid }?
       & # ID of filter to use to filter query.
       attribute filt_id { uuid }?
       & # Whether to get the trashcan agents instead.
       attribute trash { boolean }?
       & # Whether to include agents package information when no format was provided.
       attribute details { boolean }?
       & attribute format { xsd:token { pattern = "installer|howto_install|howto_use" } }?
       & attribute sort_order { sort_order }?
       & attribute sort_field { text }?
     }

## Command get_configs
##
## Get all configs.

get_configs
 = element get_configs
     {
       # ID of single config to get.
       attribute config_id { uuid }?
       & # Actions filter for configs of observed tasks.
       attribute actions { actions }?
       & # Whether to get the trashcan configs instead.
       attribute trash { boolean }?
       & # Whether to get config families, preferences, nvt selectors and tasks.
       attribute details { boolean }?
       & attribute export { boolean }?
       & attribute families { boolean }?
       & attribute preferences { boolean }?
       & attribute sort_order { sort_order }?
       & attribute sort_field { text }?
       & # Whether to get tasks using this config.
       attribute tasks { boolean }?
     }

## Command get_dependencies
##
## Get dependencies for all available NVTs.

get_dependencies
 = element get_dependencies
     {
       # ID of single NVT for which to get dependencies.
       attribute nvt_oid { oid }?
     }

## Command get_alerts
##
## Get all alerts.

get_alerts
 = element get_alerts
     {
       # ID of single alert to get.
       attribute alert_id { uuid }?
       & # Whether to get the trashcan alerts instead.
       attribute trash { boolean }?
       & # Whether to get the alerts filters.
       attribute filter { boolean }?
       & attribute sort_order { sort_order }?
       & attribute sort_field { text }?
     }

## Command get_filters
##
## Get all filters.

get_filters
 = element get_filters
     {
       # ID of single filter to get.
       attribute filter_id { uuid }?
       & # Filter term to use to filter query.
       attribute filter { uuid }?
       & # ID of filter to use to filter query.
       attribute filt_id { uuid }?
       & # Actions filter for filters of observed tasks.
       attribute actions { actions }?
       & # Whether to get the trashcan filters instead.
       attribute trash { boolean }?
       & # Whether to include list of alerts that use the filter.
       attribute alerts { boolean }?
     }

## Command get_info
##
## Get information for items of given type.

get_info
 = element get_info
     {
       # Type must be either CPE, CVE, DFN_CERT_ADV, OVALDEF or NVT.
       attribute type { text }
       & # Name or identifier of the requested information.
       attribute name { text }?
       & # ID of single info to get. Conflicts with name.
       attribute info_id { text }?
       & # Filter term to use to filter query.
       attribute filter { uuid }?
       & # ID of filter to use to filter query.
       attribute filt_id { uuid }?
       & # Whether to include information about references to this information.
       attribute details { boolean }?
     }

## Command get_lsc_credentials
##
## Get all LSC credentials.

get_lsc_credentials
 = element get_lsc_credentials
     {
       # ID of single LSC credential to get.
       attribute lsc_credential_id { uuid }?
       & # Actions filter for LSC credentials of observed tasks.
       attribute actions { actions }?
       & # Whether to get the trashcan LSC credentials instead.
       attribute trash { boolean }?
       & # Whether to include a list of targets using the credentials.
       attribute targets { boolean }?
       & attribute format { xsd:token { pattern = "key|rpm|deb|exe" } }?
       & attribute sort_order { sort_order }?
       & attribute sort_field { text }?
     }

## Command get_notes
##
## Get all notes.

get_notes
 = element get_notes
     {
       # ID of single note to get.
       attribute note_id { uuid }?
       & # Filter term to use to filter query.
       attribute filter { uuid }?
       & # ID of filter to use to filter query..
       attribute filt_id { uuid }?
       & attribute nvt_oid { oid }?
       & attribute task_id { uuid }?
       & attribute details { boolean }?
       & attribute result { boolean }?
       & attribute sort_order { sort_order }?
       & attribute sort_field { text }?
     }

## Command get_nvts
##
## Get all NVTs.

get_nvts
 = element get_nvts
     {
       # Single NVT to get.
       attribute nvt_oid { oid }
       & # Actions filter for NVTs of configs observed tasks.
       attribute actions { actions }?
       & # Whether to include full details.
       attribute details { boolean }?
       & # Whether to include preference.
       attribute preferences { boolean }?
       & # Whether to include preference count.
       attribute preference_count { boolean }?
       & # Whether to include the special timeout preference.
       attribute timeout { boolean }?
       & # ID of config to which to limit the NVT listing.
       attribute config_id { uuid }?
       & # Family to which to limit NVT listing.
       attribute family { text }?
       & attribute sort_order { sort_order }?
       & attribute sort_field { text }?
     }

## Command get_nvt_families
##
## Get a list of all NVT families.

get_nvt_families
 = element get_nvt_families
     {
       attribute sort_order { sort_order }?
     }

## Command get_nvt_feed_checksum
##
## Get checksum for entire NVT collection.

get_nvt_feed_checksum
 = element get_nvt_feed_checksum
     {
       attribute algorithm { text }?
     }

## Command get_overrides
##
## Get all overrides.

get_overrides
 = element get_overrides
     {
       # ID of single override to get.
       attribute override_id { uuid }?
       & # Filter term to use to filter query.
       attribute filter { uuid }?
       & # ID of filter to use to filter query..
       attribute filt_id { uuid }?
       & attribute nvt_oid { oid }?
       & attribute task_id { uuid }?
       & attribute details { boolean }?
       & attribute result { boolean }?
       & attribute sort_order { sort_order }?
       & attribute sort_field { text }?
     }

## Command get_port_lists
##
## Get all port lists.

get_port_lists
 = element get_port_lists
     {
       # ID of single port list to get.
       attribute port_list_id { uuid }?
       & # Whether to include full port list details.
       attribute details { boolean }?
       & # Whether to include targets using this port list.
       attribute targets { boolean }?
       & # Whether to get the trashcan port lists instead.
       attribute trash { boolean }?
       & attribute sort_order { sort_order }?
       & attribute sort_field { text }?
     }

## Command get_preferences
##
## Get all preferences.

get_preferences
 = element get_preferences
     {
       attribute nvt_oid { oid }?
       & # ID of config of which to show preference values.
       attribute config_id { uuid }?
       & # The name of a particular preference to get.
       attribute preference { text }?
     }

## Command get_reports
##
## Get all reports.

get_reports
 = element get_reports
     {
       # ID of single report to get.
       attribute report_id { uuid }?
       & # Filter term to use to filter query.
       attribute filter { uuid }?
       & # ID of filter to use to filter query.
       attribute filt_id { uuid }?
       & # Type of report to get.
       attribute type { xsd:token { pattern = "scan|assets|prognostic" } }?
       & # ID of required report format.
       attribute format_id { uuid }?
       & # ID of alert to pass generated report to.
       attribute alert_id { uuid }?
       & # First result to get.
       attribute first_result { integer }?
       & # Maximum number of results to get.
       attribute max_results { integer }?
       & attribute sort_order { sort_order }?
       & attribute sort_field { text }?
       & # Which threat levels to include in the report.
       attribute levels { levels }?
       & # A string that all results in the report must contain.
       attribute search_phrase { text }?
       & # Minimum CVSS base of results in report.
       attribute min_cvss_base { integer }?
       & # Whether to include notes in the report.
       attribute notes { boolean }?
       & # If notes are included, whether to include note details.
       attribute note_details { boolean }?
       & # Whether to include overrides in the report.
       attribute overrides { boolean }?
       & # If overrides are included, whether to include override details.
       attribute override_details { boolean }?
       & # Whether to include only those hosts that have results.
       attribute result_hosts_only { boolean }?
       & # For "assets" or "prognostic", single host to retrieve.
       attribute host { text }?
       & # For "assets" or "prognostic", first host to retrieve.
       attribute host_first_result { integer }?
       & # For "assets" or "prognostic", maximum hosts to retrieve.
       attribute host_max_results { integer }?
       & # For "assets" or "prognostic", which threat levels to include in hosts.
       attribute host_levels { levels }?
       & # For type "assets", position of report used, from end.
       attribute pos { integer }?
       & # ID of second report, for producing a delta report.
       attribute delta_report_id { uuid }?
       & # Letters for results to include: c)hanged, g)one, n)ew, s)ame.
       attribute delta_states {  }?
       & # Whether to trust vendor security updates. 1 full match, 2 partial..
       attribute autofp {  }?
       & # Whether to include the Closed CVEs host detail in the report.
       attribute show_closed_cves { boolean }?
     }

## Command get_report_formats
##
## Get all report formats.

get_report_formats
 = element get_report_formats
     {
       # ID of single report format to get.
       attribute report_format_id { uuid }?
       & # Whether to get the trashcan report formats instead.
       attribute trash { boolean }?
       & # Whether to include alerts that use the report format.
       attribute alerts { boolean }?
       & # Whether to include report format parameters.
       attribute params { boolean }?
       & # Include report format file, signature and parameters.
       attribute details { boolean }?
       & attribute sort_order { sort_order }?
       & attribute sort_field { text }?
     }

## Command get_results
##
## Get results.

get_results
 = element get_results
     {
       # ID of single result to get.
       attribute result_id { uuid }?
       & # ID of task for note and override handling.
       attribute task_id { uuid }?
       & # Whether to include notes in the result.
       attribute notes { boolean }?
       & # If notes are included, whether to include note details.
       attribute note_details { boolean }?
       & # Whether to include overrides in the result.
       attribute overrides { boolean }?
       & # If overrides are included, whether to include override details.
       attribute override_details { boolean }?
       & # Whether to override result threat levels.
       attribute apply_overrides { boolean }?
     }

## Command get_schedules
##
## Get all schedules.

get_schedules
 = element get_schedules
     {
       # ID of single schedule to get.
       attribute schedule_id { uuid }?
       & # Whether to get the trashcan schedules instead.
       attribute trash { boolean }?
       & # Whether to include tasks using the schedules.
       attribute tasks { boolean }?
       & attribute sort_order { sort_order }?
       & attribute sort_field { text }?
     }

## Command get_settings
##
## Get all settings.

get_settings
 = element get_settings
     {
       # ID of single setting to get.
       attribute setting_id { uuid }?
       & # Filter term.
       attribute filter { text }?
       & # First result.
       attribute first { integer }?
       & # Maximum number of results in response.
       attribute max { integer }?
       & attribute sort_order { sort_order }?
       & attribute sort_field { text }?
     }

## Command get_slaves
##
## Get all slaves.

get_slaves
 = element get_slaves
     {
       # ID of single slave to get.
       attribute slave_id { uuid }?
       & # Whether to get the trashcan slaves instead.
       attribute trash { boolean }?
       & # Whether to include a list of tasks using the slave.
       attribute tasks { boolean }?
       & attribute sort_order { sort_order }?
       & attribute sort_field { text }?
     }

## Command get_system_reports
##
## Get all system reports.

get_system_reports
 = element get_system_reports
     {
       # A string describing the required report.
       attribute name { text }?
       & # The number of seconds into the past that the report should include.
       attribute duration { integer }?
       & # Whether to include the actual reports.
       attribute brief { boolean }?
       & # Slave from which to get report.
       attribute slave_id { uuid }?
     }

## Command get_target_locators
##
## Get configured target locators.

get_target_locators
 = element get_target_locators
     {
       ""
     }

## Command get_targets
##
## Get all targets.

get_targets
 = element get_targets
     {
       # ID of single target to get.
       attribute target_id { uuid }?
       & # Filter term to use to filter query.
       attribute filter { uuid }?
       & # ID of filter to use to filter query..
       attribute filt_id { uuid }?
       & # Actions filter for targets of observed tasks.
       attribute actions { actions }?
       & # Whether to get the trashcan targets instead.
       attribute trash { boolean }?
       & # Whether to include list of tasks that use the target.
       attribute tasks { boolean }?
       & attribute sort_order { sort_order }?
       & attribute sort_field { text }?
     }

## Command get_tasks
##
## Get all tasks.

get_tasks
 = element get_tasks
     {
       # ID of single task to get.
       attribute task_id { uuid }?
       & # Actions filter for tasks of observed tasks.
       attribute actions { actions }?
       & # Whether to get the trashcan tasks instead.
       attribute trash { boolean }?
       & # Whether to include full task details.
       attribute details { boolean }?
       & # Whether to include task RC file (for openvas-client).
       attribute rcfile { boolean }?
       & # Whether to override result threat levels.
       attribute apply_overrides { boolean }?
       & attribute sort_order { sort_order }?
       & attribute sort_field { text }?
     }

## Command get_version
##
## Get the OpenVAS Manager Protocol version.

get_version
 = element get_version
     {
       ""
     }

## Command help
##
## Get the help text.

help
 = element help
     {
       # Required help format.
       attribute format { xsd:token { pattern = "html|HTML|rnc|RNC|text|TEXT|xml|XML" } }?
     }

## Command modify_agent
##
## Modify an existing agent.

modify_agent
 = element modify_agent
     {
       # ID of agent to modify.
       attribute agent { uuid }
       & modify_agent_name?
       & modify_agent_comment?
     }

# Comment on agent.
modify_agent_comment
 = element comment
     {
       text
     }

# Name of agent.
modify_agent_name
 = element name
     {
       name
     }

## Command modify_alert
##
## Modify an existing alert.

modify_alert
 = element modify_alert
     {
       # ID of alert to modify.
       attribute alert_id { uuid }
       & modify_alert_name?
       & modify_alert_comment?
       & modify_alert_filter?
       & modify_alert_event?
       & modify_alert_condition?
       & modify_alert_method?
     }

# Name of alert.
modify_alert_name
 = element name
     {
       name
     }

# Comment on alert.
modify_alert_comment
 = element comment
     {
       text
     }

# The condition that must be satisfied for the alert to occur.
modify_alert_condition
 = element condition
     {
       text
       & modify_alert_condition_data*
     }

# Some data that defines the condition.
modify_alert_condition_data
 = element data
     {
       text
       & modify_alert_condition_data_name
     }

# The name of the condition data.
modify_alert_condition_data_name
 = element name
     {
       text
     }

# The event that must happen for the alert to occur.
modify_alert_event
 = element event
     {
       text
       & modify_alert_event_data*
     }

# Some data that defines the event.
modify_alert_event_data
 = element data
     {
       text
       & modify_alert_event_data_name
     }

# The name of the event data.
modify_alert_event_data_name
 = element name
     {
       text
     }

# The method by which the user is alerted.
modify_alert_method
 = element method
     {
       text
       & modify_alert_method_data*
     }

# Some data that defines the method.
modify_alert_method_data
 = element data
     {
       text
       & modify_alert_method_data_name
     }

# The name of the method data.
modify_alert_method_data_name
 = element name
     {
       text
     }

# Filter to apply when executing alert.
modify_alert_filter
 = element filter
     {
       attribute id { uuid }
     }

## Command modify_config
##
## Modify an existing config.

modify_config
 = element modify_config
     {
       # ID of config to modify.
       attribute config_id { uuid }
       & ( modify_config_name
           | modify_config_comment
           | modify_config_preference
           | modify_config_family_selection
           | modify_config_nvt_selection )
     }

# New name for the config.
modify_config_name
 = element name
     {
       name
     }

# New comment for the config.
modify_config_comment
 = element comment
     {
       text
     }

modify_config_preference
 = element preference
     {
       modify_config_preference_name
       & modify_config_preference_nvt?
       & modify_config_preference_value?
     }

# The name of the preference to modify.
modify_config_preference_name
 = element name
     {
       name
     }

# NVT associated with preference to modify.
modify_config_preference_nvt
 = element nvt
     {
       attribute oid { oid }
     }

# New value for preference.
modify_config_preference_value
 = element value
     {
       base64
     }

modify_config_family_selection
 = element family_selection
     {
       modify_config_family_selection_growing?
       & modify_config_family_selection_family*
     }

# Whether new families should be added to the config.
modify_config_family_selection_growing
 = element growing
     {
       boolean_atoi
     }

modify_config_family_selection_family
 = element family
     {
       modify_config_family_selection_family_all?
       & modify_config_family_selection_family_growing?
       & modify_config_family_selection_family_name
     }

# Whether to select all NVTs initially.
modify_config_family_selection_family_all
 = element all
     {
       boolean_atoi
     }

# Whether to add newly arrived nvts to the selection.
modify_config_family_selection_family_growing
 = element growing
     {
       boolean_atoi
     }

modify_config_family_selection_family_name
 = element name
     {
       name
     }

modify_config_nvt_selection
 = element nvt_selection
     {
       modify_config_nvt_selection_family
       & modify_config_nvt_selection_nvt*
     }

# Name of family to modify.
modify_config_nvt_selection_family
 = element family
     {
       name
     }

modify_config_nvt_selection_nvt
 = element nvt
     {
       attribute oid { oid }
     }

## Command modify_filter
##
## Modify an existing filter.

modify_filter
 = element modify_filter
     {
       # ID of filter to modify.
       attribute filter_id { uuid }
       & modify_filter_comment?
       & modify_filter_name?
       & modify_filter_term?
       & modify_filter_type?
     }

# Comment on filter.
modify_filter_comment
 = element comment
     {
       text
     }

# Name of filter.
modify_filter_name
 = element name
     {
       name
     }

# Filter term.
modify_filter_term
 = element term
     {
       text
     }

# Resource type filter applies to.
modify_filter_type
 = element type
     {
       text
     }

## Command modify_lsc_credential
##
## Modify an existing LSC credential.

modify_lsc_credential
 = element modify_lsc_credential
     {
       # ID of LSC credential to modify.
       attribute lsc_credential_id { uuid }
       & modify_lsc_credential_comment?
       & modify_lsc_credential_name?
       & modify_lsc_credential_password?
       & modify_lsc_credential_login?
     }

# A name for the LSC credential.
modify_lsc_credential_name
 = element name
     {
       name
     }

# A comment on the LSC credential.
modify_lsc_credential_comment
 = element comment
     {
       text
     }

# The user name of the credential.
modify_lsc_credential_login
 = element login
     {
       text
     }

# The password for the credential login.
modify_lsc_credential_password
 = element password
     {
       text
     }

## Command modify_note
##
## Modify an existing note.

modify_note
 = element modify_note
     {
       # ID of note to modify.
       attribute note_id { uuid }
       & modify_note_active?
       & modify_note_hosts?
       & modify_note_port?
       & modify_note_result?
       & modify_note_task?
       & modify_note_text
       & modify_note_threat?
     }

# Seconds note will be active. -1 on always, 0 off.
modify_note_active
 = element active
     {
       integer
     }

# A textual list of hosts.
modify_note_hosts
 = element hosts
     {
       text
     }

# Port to which note applies.
modify_note_port
 = element port
     {
       text
     }

# The text of the note.
modify_note_text
 = element text
     {
       text
     }

# Threat level to which note applies.
modify_note_threat
 = element threat
     {
       threat
     }

# Task to which note applies.
modify_note_task
 = element task
     {
       attribute id { uuid }
     }

# Result to which note applies.
modify_note_result
 = element result
     {
       attribute id { uuid }
     }

## Command modify_override
##
## Modify an existing override.

modify_override
 = element modify_override
     {
       # ID of override to modify.
       attribute override_id { uuid }
       & modify_override_active?
       & modify_override_hosts?
       & modify_override_new_threat?
       & modify_override_port?
       & modify_override_result?
       & modify_override_task?
       & modify_override_text
       & modify_override_threat?
     }

# Seconds override will be active. -1 on always, 0 off.
modify_override_active
 = element active
     {
       integer
     }

# A textual list of hosts.
modify_override_hosts
 = element hosts
     {
       text
     }

# New threat level for result.
modify_override_new_threat
 = element new_threat
     {
       threat
     }

# Port to which override applies.
modify_override_port
 = element port
     {
       text
     }

# Text describing the override.
modify_override_text
 = element text
     {
       text
     }

# Threat level to which override applies.
modify_override_threat
 = element threat
     {
       threat
     }

# Task to which override applies.
modify_override_task
 = element task
     {
       attribute id { uuid }
     }

# Result to which override applies.
modify_override_result
 = element result
     {
       attribute id { uuid }
     }

## Command modify_port_list
##
## Modify an existing port list.

modify_port_list
 = element modify_port_list
     {
       # ID of port list to modify.
       attribute port_list_id { uuid }
       & modify_port_list_name?
       & modify_port_list_comment?
     }

# Name of port list.
modify_port_list_name
 = element name
     {
       name
     }

# Comment on port list.
modify_port_list_comment
 = element comment
     {
       text
     }

## Command modify_report
##
## Modify an existing report.

modify_report
 = element modify_report
     {
       # ID of report to modify.
       attribute report_id { uuid }
       & modify_report_comment
     }

# The comment on the report.
modify_report_comment
 = element comment
     {
       text
     }

## Command modify_report_format
##
## Update an existing report format.

modify_report_format
 = element modify_report_format
     {
       # ID of report format to modify.
       attribute report_format_id { uuid }
       & ( modify_report_format_active
           | modify_report_format_name
           | modify_report_format_summary
           | modify_report_format_param )
     }

# Whether the report format is active.
modify_report_format_active
 = element active
     {
       boolean
     }

# The name of the report format.
modify_report_format_name
 = element name
     {
       name
     }

# A summary of the report format.
modify_report_format_summary
 = element summary
     {
       text
     }

modify_report_format_param
 = element param
     {
       modify_report_format_param_name
       & modify_report_format_param_value?
     }

# The name of the param.
modify_report_format_param_name
 = element name
     {
       name
     }

# New value for the param.
modify_report_format_param_value
 = element value
     {
       base64
     }

## Command modify_schedule
##
## Modify an existing schedule.

modify_schedule
 = element modify_schedule
     {
       # ID of schedule to modify.
       attribute schedule_id { uuid }
       & modify_schedule_comment?
       & modify_schedule_name?
       & modify_schedule_first_time?
       & modify_schedule_duration?
       & modify_schedule_period?
       & modify_schedule_timezone?
     }

# Comment on schedule.
modify_schedule_comment
 = element comment
     {
       text
     }

# Name of schedule.
modify_schedule_name
 = element name
     {
       name
     }

# First time the task will run.
modify_schedule_first_time
 = element first_time
     {
       modify_schedule_first_time_day_of_month?
       & modify_schedule_first_time_hour?
       & modify_schedule_first_time_minute?
       & modify_schedule_first_time_month?
       & modify_schedule_first_time_year?
     }

modify_schedule_first_time_day_of_month
 = element day_of_month
     {
       text
     }

modify_schedule_first_time_hour
 = element hour
     {
       text
     }

modify_schedule_first_time_minute
 = element minute
     {
       text
     }

modify_schedule_first_time_month
 = element month
     {
       text
     }

modify_schedule_first_time_year
 = element year
     {
       text
     }

# The timezone the schedule will follow.
modify_schedule_timezone
 = element timezone
     {
       text
     }

# How long the task will run for.
modify_schedule_duration
 = element duration
     {
       text
       & modify_schedule_duration_unit?
     }

modify_schedule_duration_unit
 = element unit
     {
       time_unit
     }

# How often the task will run.
modify_schedule_period
 = element period
     {
       text
       & modify_schedule_period_unit?
     }

modify_schedule_period_unit
 = element unit
     {
       time_unit
     }

## Command modify_setting
##
## Modify an existing setting.

modify_setting
 = element modify_setting
     {
       attribute setting_id { uuid }?
       & modify_setting_name
       & modify_setting_value
     }

# The name of the setting.
modify_setting_name
 = element name
     {
       text
     }

# The value of the setting.
modify_setting_value
 = element value
     {
       text
     }

## Command modify_slave
##
## Modify an existing slave.

modify_slave
 = element modify_slave
     {
       # ID of slave to modify.
       attribute slave { uuid }
       & modify_slave_name
       & modify_slave_comment?
       & modify_slave_host
       & modify_slave_port
       & modify_slave_login
       & modify_slave_password
     }

# A name for the slave.
modify_slave_name
 = element name
     {
       name
     }

# A comment on the slave.
modify_slave_comment
 = element comment
     {
       text
     }

# The host that the slave Manager is running on.
modify_slave_host
 = element host
     {
       text
     }

# The port that the slave Manager is serving on the host.
modify_slave_port
 = element port
     {
       text
     }

# Login name on the slave Manager.
modify_slave_login
 = element login
     {
       text
     }

# Password for login on the slave Manager.
modify_slave_password
 = element password
     {
       text
     }

## Command modify_target
##
## Modify an existing target.

modify_target
 = element modify_target
     {
       # ID of target to modify.
       attribute target_id { uuid }
       & modify_target_comment?
       & modify_target_name?
       & modify_target_hosts?
       & modify_target_ssh_lsc_credential?
       & modify_target_smb_lsc_credential?
       & modify_target_port_list?
       & modify_target_target_locator?
     }

# Comment on target.
modify_target_comment
 = element comment
     {
       text
     }

# Name of target.
modify_target_name
 = element name
     {
       name
     }

# Target hosts.
modify_target_hosts
 = element hosts
     {
       text
     }

# SSH credential to use on target.
modify_target_ssh_lsc_credential
 = element ssh_lsc_credential
     {
       attribute id { uuid }
     }

# SMB credential to use on target.
modify_target_smb_lsc_credential
 = element smb_lsc_credential
     {
       attribute id { uuid }
     }

# Port List describing ports to scan.
modify_target_port_list
 = element port_list
     {
       attribute id { uuid }
     }

modify_target_target_locator
 = element target_locator
     {
       modify_target_target_locator_username
       & modify_target_target_locator_password
     }

modify_target_target_locator_username
 = element username
     {
       text
     }

modify_target_target_locator_password
 = element password
     {
       text
     }

## Command modify_task
##
## Modify an existing task.

modify_task
 = element modify_task
     {
       # ID of task to modify.
       attribute task_id { uuid }
       & ( modify_task_comment
           | modify_task_alert*
           | modify_task_name
           | modify_task_observers
           | modify_task_preferences
           | modify_task_rcfile
           | modify_task_schedule
           | modify_task_slave
           | modify_task_file )
     }

# The comment on the task.
modify_task_comment
 = element comment
     {
       text
     }

# Task alert.
modify_task_alert
 = element alert
     {
       attribute id { uuid }
     }

# The name of the task.
modify_task_name
 = element name
     {
       name
     }

# Users allowed to observe this task.
modify_task_observers
 = element observers
     {
       user_list
     }

modify_task_preferences
 = element preferences
     {
       modify_task_preferences_preference*
     }

modify_task_preferences_preference
 = element preference
     {
       modify_task_preferences_preference_scanner_name
       & modify_task_preferences_preference_value
     }

# Compact name of preference, from scanner.
modify_task_preferences_preference_scanner_name
 = element scanner_name
     {
       text
     }

modify_task_preferences_preference_value
 = element value
     {
       text
     }

# An openvasrc style file describing the task.
modify_task_rcfile
 = element rcfile
     {
       base64
     }

# Task schedule.
modify_task_schedule
 = element schedule
     {
       attribute id { uuid }
     }

# Task slave.
modify_task_slave
 = element slave
     {
       attribute id { uuid }
     }

# File to attach to task.
modify_task_file
 = element file
     {
       text # RNC limitation: base64
       & attribute name { text }
       & attribute action { xsd:token { pattern = "update|remove" } }
     }

## Command pause_task
##
## Pause a running task.

pause_task
 = element pause_task
     {
       attribute task_id { uuid }
     }

## Command restore
##
## Restore a resource.

restore
 = element restore
     {
       attribute id { uuid }
     }

## Command resume_or_start_task
##
## Resume task if stopped, else start task.

resume_or_start_task
 = element resume_or_start_task
     {
       attribute task_id { uuid }
     }

## Command resume_paused_task
##
## Resume a paused task.

resume_paused_task
 = element resume_paused_task
     {
       attribute task_id { uuid }
     }

## Command resume_stopped_task
##
## Resume a stopped task.

resume_stopped_task
 = element resume_stopped_task
     {
       attribute task_id { uuid }
     }

## Command run_wizard
##
## Run a wizard.

run_wizard
 = element run_wizard
     {
       run_wizard_name
       & run_wizard_params
     }

# The name of the wizard.
run_wizard_name
 = element name
     {
       name
     }

# Parameters for the wizard.
run_wizard_params
 = element params
     {
       run_wizard_params_param*
     }

run_wizard_params_param
 = element param
     {
       run_wizard_params_param_name
       & run_wizard_params_param_value
     }

# Parameter name.
run_wizard_params_param_name
 = element name
     {
       text
     }

# Value of parameter.
run_wizard_params_param_value
 = element value
     {
       text
     }

## Command start_task
##
## Manually start an existing task.

start_task
 = element start_task
     {
       attribute task_id { uuid }
     }

## Command stop_task
##
## Stop a running task.

stop_task
 = element stop_task
     {
       attribute task_id { uuid }
     }

## Command test_alert
##
## Run an alert.

test_alert
 = element test_alert
     {
       attribute alert_id { uuid }
     }

## Command verify_agent
##
## Verify an agent.

verify_agent
 = element verify_agent
     {
       attribute agent_id { uuid }
     }

## Command verify_report_format
##
## Verify a report format.

verify_report_format
 = element verify_report_format
     {
       attribute report_format_id { uuid }
     }

### Responses

## Response to authenticate

authenticate_response
 = element authenticate_response
     {
       attribute status { status }
       & attribute status_text { text }
       & authenticate_response_role
       & authenticate_response_timezone
     }

# The user's role.
authenticate_response_role
 = element role    # type UserAdminObserver
     {
     }

# The user's timezone.
authenticate_response_timezone
 = element timezone
     {
       text
     }

## Response to commands

commands_response
 = element commands_response
     {
       attribute status { status }
       & attribute status_text { text }
       & ( authenticate_response
           | commands_response
           | create_agent_response
           | create_alert_response
           | create_config_response
           | create_filter_response
           | create_lsc_credential_response
           | create_note_response
           | create_override_response
           | create_port_list_response
           | create_port_range_response
           | create_schedule_response
           | create_slave_response
           | create_target_response
           | create_task_response
           | delete_agent_response
           | delete_alert_response
           | delete_config_response
           | delete_filter_response
           | delete_lsc_credential_response
           | delete_note_response
           | delete_override_response
           | delete_port_list_response
           | delete_port_range_response
           | delete_report_response
           | delete_report_format_response
           | delete_schedule_response
           | delete_slave_response
           | delete_target_response
           | delete_task_response
           | empty_trashcan_response
           | get_agents_response
           | get_alerts_response
           | get_configs_response
           | get_dependencies_response
           | get_info_response
           | get_lsc_credentials_response
           | get_filters_response
           | get_notes_response
           | get_nvts_response
           | get_nvt_families_response
           | get_nvt_feed_checksum_response
           | get_overrides_response
           | get_port_lists_response
           | get_preferences_response
           | get_reports_response
           | get_report_formats_response
           | get_results_response
           | get_slaves_response
           | get_schedules_response
           | get_settings_response
           | get_system_reports_response
           | get_target_locators_response
           | get_targets_response
           | get_tasks_response
           | get_version_response
           | help_response
           | modify_agent_response
           | modify_alert_response
           | modify_config_response
           | modify_filter_response
           | modify_lsc_credential_response
           | modify_note_response
           | modify_override_response
           | modify_port_list_response
           | modify_report_response
           | modify_schedule_response
           | modify_setting_response
           | modify_slave_response
           | modify_target_response
           | modify_task_response
           | pause_task_response
           | restore_response
           | resume_or_start_task_response
           | resume_paused_task_response
           | resume_stopped_task_response
           | run_wizard_response
           | start_task_response
           | stop_task_response
           | test_alert_response )*
     }

## Response to create_agent

create_agent_response
 = element create_agent_response
     {
       attribute status { status }
       & attribute status_text { text }
       & attribute id { uuid }
     }

## Response to create_config

create_config_response
 = element create_config_response
     {
       attribute status { status }
       & attribute status_text { text }
       & attribute id { uuid }
     }

## Response to create_alert

create_alert_response
 = element create_alert_response
     {
       attribute status { status }
       & attribute status_text { text }
       & attribute id { uuid }
     }

## Response to create_filter

create_filter_response
 = element create_filter_response
     {
       attribute status { status }
       & attribute status_text { text }
       & attribute id { uuid }
     }

## Response to create_lsc_credential

create_lsc_credential_response
 = element create_lsc_credential_response
     {
       attribute status { status }
       & attribute status_text { text }
       & attribute id { uuid }
     }

## Response to create_note

create_note_response
 = element create_note_response
     {
       attribute status { status }
       & attribute status_text { text }
       & attribute id { uuid }
     }

## Response to create_override

create_override_response
 = element create_override_response
     {
       attribute status { status }
       & attribute status_text { text }
       & attribute id { uuid }
     }

## Response to create_port_list

create_port_list_response
 = element create_port_list_response
     {
       attribute status { status }
       & attribute status_text { text }
       & attribute id { uuid }
     }

## Response to create_port_range

create_port_range_response
 = element create_port_range_response
     {
       attribute status { status }
       & attribute status_text { text }
       & attribute id { uuid }
     }

## Response to create_report

create_report_response
 = element create_report_response
     {
       attribute status { status }
       & attribute status_text { text }
       & attribute id { uuid }
     }

## Response to create_report_format

create_report_format_response
 = element create_report_format_response
     {
       attribute status { status }
       & attribute status_text { text }
       & attribute id { uuid }
     }

## Response to create_schedule

create_schedule_response
 = element create_schedule_response
     {
       attribute status { status }
       & attribute status_text { text }
       & attribute id { uuid }
     }

## Response to create_slave

create_slave_response
 = element create_slave_response
     {
       attribute status { status }
       & attribute status_text { text }
       & attribute id { uuid }
     }

## Response to create_target

create_target_response
 = element create_target_response
     {
       attribute status { status }
       & attribute status_text { text }
       & attribute id { uuid }
     }

## Response to create_task

create_task_response
 = element create_task_response
     {
       attribute status { status }
       & attribute status_text { text }
       & attribute id { uuid }
     }

## Response to delete_agent

delete_agent_response
 = element delete_agent_response
     {
       attribute status { status }
       & attribute status_text { text }
     }

## Response to delete_config

delete_config_response
 = element delete_config_response
     {
       attribute status { status }
       & attribute status_text { text }
     }

## Response to delete_alert

delete_alert_response
 = element delete_alert_response
     {
       attribute status { status }
       & attribute status_text { text }
     }

## Response to delete_filter

delete_filter_response
 = element delete_filter_response
     {
       attribute status { status }
       & attribute status_text { text }
     }

## Response to delete_lsc_credential

delete_lsc_credential_response
 = element delete_lsc_credential_response
     {
       attribute status { status }
       & attribute status_text { text }
     }

## Response to delete_note

delete_note_response
 = element delete_note_response
     {
       attribute status { status }
       & attribute status_text { text }
     }

## Response to delete_override

delete_override_response
 = element delete_override_response
     {
       attribute status { status }
       & attribute status_text { text }
     }

## Response to delete_report

delete_report_response
 = element delete_report_response
     {
       attribute status { status }
       & attribute status_text { text }
     }

## Response to delete_port_list

delete_port_list_response
 = element delete_port_list_response
     {
       attribute status { status }
       & attribute status_text { text }
     }

## Response to delete_port_range

delete_port_range_response
 = element delete_port_range_response
     {
       attribute status { status }
       & attribute status_text { text }
     }

## Response to delete_report_format

delete_report_format_response
 = element delete_report_format_response
     {
       attribute status { status }
       & attribute status_text { text }
     }

## Response to delete_schedule

delete_schedule_response
 = element delete_schedule_response
     {
       attribute status { status }
       & attribute status_text { text }
     }

## Response to delete_slave

delete_slave_response
 = element delete_slave_response
     {
       attribute status { status }
       & attribute status_text { text }
     }

## Response to delete_target

delete_target_response
 = element delete_target_response
     {
       attribute status { status }
       & attribute status_text { text }
     }

## Response to delete_task

delete_task_response
 = element delete_task_response
     {
       attribute status { status }
       & attribute status_text { text }
     }

## Response to empty_trashcan

empty_trashcan_response
 = element empty_trashcan_response
     {
       attribute status { status }
       & attribute status_text { text }
     }

## Response to get_agents

get_agents_response
 = element get_agents_response
     {
       attribute status { status }
       & attribute status_text { text }
       & agent*
       & get_agents_response_filters
       & get_agents_response_sort
       & get_agents_response_agents
       & get_agents_response_agent_count
     }

get_agents_response_agent_id
 = element agent_id
     {
       attribute id { uuid }
       & get_agents_response_agent_id_name
       & get_agents_response_agent_id_comment
       & get_agents_response_agent_id_creation_time
       & get_agents_response_agent_id_modification_time
       & get_agents_response_agent_id_in_use
       & get_agents_response_agent_id_writable
       & ( get_agents_response_agent_id_installer
           | get_agents_response_agent_id_package )
     }

# The name of the agent.
get_agents_response_agent_id_name
 = element name
     {
       name
     }

# The comment on the agent.
get_agents_response_agent_id_comment
 = element comment
     {
       text
     }

# Date and time the agent was created.
get_agents_response_agent_id_creation_time
 = element creation_time
     {
       iso_time
     }

# Date and time the agent was last modified.
get_agents_response_agent_id_modification_time
 = element modification_time
     {
       iso_time
     }

# Whether the agent is in use.
get_agents_response_agent_id_in_use
 = element in_use
     {
       boolean
     }

# Whether the agent is writable.
get_agents_response_agent_id_writable
 = element writable
     {
       boolean
     }

get_agents_response_agent_id_installer
 = element installer
     {
       get_agents_response_agent_id_installer_trust
     }

# Whether signature verification succeeded.
get_agents_response_agent_id_installer_trust
 = element trust
     {
       text # RNC limitation: xsd:token { pattern = "yes|no|unknown" }
       & get_agents_response_agent_id_installer_trust_time
     }

# When the signature was verified.
get_agents_response_agent_id_installer_trust_time
 = element time
     {
       iso_time
     }

# Either the installer or one of the HOWTOs.
get_agents_response_agent_id_package
 = element package
     {
       text # RNC limitation: base64
       & get_agents_response_agent_id_package_filename
     }

# The filename of the package.
get_agents_response_agent_id_package_filename
 = element filename
     {
       text
     }

get_agents_response_filters
 = element filters
     {
       # UUID of filter if any, else 0.
       attribute id { uuid }
       & get_agents_response_filters_term
     }

# Filter term.
get_agents_response_filters_term
 = element term
     {
       text
     }

get_agents_response_sort
 = element sort
     {
       text
       & get_agents_response_sort_field
     }

get_agents_response_sort_field
 = element field
     {
       get_agents_response_sort_field_order
     }

get_agents_response_sort_field_order
 = element order
     {
       xsd:token { pattern = "ascending|descending" }
     }

get_agents_response_agents
 = element agents
     {
       # First agent.
       attribute start {  }
       & # Maximum number of agents.
       attribute max {  }
     }

get_agents_response_agent_count
 = element agent_count
     {
       get_agents_response_agent_count_filtered
       & get_agents_response_agent_count_page
     }

# Number of agents after filtering.
get_agents_response_agent_count_filtered
 = element filtered
     {
       integer
     }

# Number of agents on current page.
get_agents_response_agent_count_page
 = element page
     {
       integer
     }

## Response to get_configs

get_configs_response
 = element get_configs_response
     {
       attribute status { status }
       & attribute status_text { text }
       & get_configs_response_config*
     }

get_configs_response_config
 = element config
     {
       get_configs_response_config_name
       & get_configs_response_config_comment
       & get_configs_response_config_creation_time
       & get_configs_response_config_modification_time
       & get_configs_response_config_family_count
       & get_configs_response_config_nvt_count
       & get_configs_response_config_max_nvt_count
       & get_configs_response_config_known_nvt_count
       & get_configs_response_config_in_use
       & get_configs_response_config_writable
       & get_configs_response_config_tasks
       & get_configs_response_config_families?
       & get_configs_response_config_preferences?
     }

# The name of the config.
get_configs_response_config_name
 = element name
     {
       name
     }

# The comment on the config.
get_configs_response_config_comment
 = element comment
     {
       text
     }

# Creation time of the config.
get_configs_response_config_creation_time
 = element creation_time
     {
       iso_time
     }

# Last time the config was modified.
get_configs_response_config_modification_time
 = element modification_time
     {
       iso_time
     }

# The number of families selected by the config.
get_configs_response_config_family_count
 = element family_count
     {
       text # RNC limitation: integer
       & get_configs_response_config_family_count_growing
     }

# Whether new families are automatically added to the config.
get_configs_response_config_family_count_growing
 = element growing
     {
       boolean
     }

# The number of NVTs selected by the config.
get_configs_response_config_nvt_count
 = element nvt_count
     {
       text # RNC limitation: integer
       & get_configs_response_config_nvt_count_growing
     }

# Whether new NVTs are automatically added to the config.
get_configs_response_config_nvt_count_growing
 = element growing
     {
       boolean
     }

# Total number of NVTs in the families selected by the config.
get_configs_response_config_max_nvt_count
 = element max_nvt_count
     {
       integer
     }

# Total number of known NVTs selected by the config.
get_configs_response_config_known_nvt_count
 = element known_nvt_count
     {
       integer
     }

# Whether any tasks are using the config.
get_configs_response_config_in_use
 = element in_use
     {
       boolean
     }

# Whether any tasks are using the config, including trashcan tasks.
get_configs_response_config_writable
 = element writable
     {
       boolean
     }

# All tasks using the config.
get_configs_response_config_tasks
 = element tasks
     {
       get_configs_response_config_tasks_task*
     }

get_configs_response_config_tasks_task
 = element task
     {
       attribute id { uuid }
       & get_configs_response_config_tasks_task_name
     }

# The name of the task.
get_configs_response_config_tasks_task_name
 = element name
     {
       name
     }

# All families selected by the config.
get_configs_response_config_families
 = element families
     {
       get_configs_response_config_families_family*
     }

get_configs_response_config_families_family
 = element family
     {
       get_configs_response_config_families_family_name
       & get_configs_response_config_families_family_nvt_count
       & get_configs_response_config_families_family_max_nvt_count
       & get_configs_response_config_families_family_growing
     }

# The name of the family.
get_configs_response_config_families_family_name
 = element name
     {
       name
     }

# The number of NVTs selected in the family.
get_configs_response_config_families_family_nvt_count
 = element nvt_count
     {
       integer
     }

# The total number of NVTs in the family.
get_configs_response_config_families_family_max_nvt_count
 = element max_nvt_count
     {
       integer
     }

# Whether new NVTs in the family are automatically added to the selection.
get_configs_response_config_families_family_growing
 = element growing
     {
       boolean
     }

# Preferences for all NVTs selected by the config.
get_configs_response_config_preferences
 = element preferences
     {
       get_configs_response_config_preferences_preference*
     }

get_configs_response_config_preferences_preference
 = element preference
     {
       get_configs_response_config_preferences_preference_nvt
       & get_configs_response_config_preferences_preference_name
       & get_configs_response_config_preferences_preference_type
       & get_configs_response_config_preferences_preference_value
     }

# NVT to which preference applies.
get_configs_response_config_preferences_preference_nvt
 = element nvt
     {
       attribute oid { oid }
       & get_configs_response_config_preferences_preference_nvt_name
     }

# The name of the NVT.
get_configs_response_config_preferences_preference_nvt_name
 = element name
     {
       name
     }

# The name of the preference.
get_configs_response_config_preferences_preference_name
 = element name
     {
       name
     }

# The type of preference.
get_configs_response_config_preferences_preference_type
 = element type
     {
       text
     }

# The value of the preference.
get_configs_response_config_preferences_preference_value
 = element value
     {
       text
     }

## Response to get_dependencies

get_dependencies_response
 = element get_dependencies_response
     {
       attribute status { status }
       & attribute status_text { text }
       & get_dependencies_response_nvt*
     }

get_dependencies_response_nvt
 = element nvt
     {
       attribute oid { oid }
       & get_dependencies_response_nvt_name
       & get_dependencies_response_nvt_requires
     }

# The name of the NVT.
get_dependencies_response_nvt_name
 = element name
     {
       name
     }

get_dependencies_response_nvt_requires
 = element requires
     {
       get_dependencies_response_nvt_requires_nvt*
     }

get_dependencies_response_nvt_requires_nvt
 = element nvt
     {
       attribute oid { oid }
       & get_dependencies_response_nvt_requires_nvt_name
     }

# The name of the NVT.
get_dependencies_response_nvt_requires_nvt_name
 = element name
     {
       name
     }

## Response to get_alerts

get_alerts_response
 = element get_alerts_response
     {
       attribute status { status }
       & attribute status_text { text }
       & get_alerts_response_alert*
     }

get_alerts_response_alert
 = element alert
     {
       get_alerts_response_alert_name
       & get_alerts_response_alert_comment
       & get_alerts_response_alert_creation_time
       & get_alerts_response_alert_modification_time
       & get_alerts_response_alert_in_use
       & get_alerts_response_alert_writable
       & get_alerts_response_alert_condition
       & get_alerts_response_alert_event
       & get_alerts_response_alert_method
       & get_alerts_response_alert_filter
     }

# The name of the alert.
get_alerts_response_alert_name
 = element name
     {
       name
     }

# The comment on the alert.
get_alerts_response_alert_comment
 = element comment
     {
       text
     }

# Whether any tasks are using the alert.
get_alerts_response_alert_in_use
 = element in_use
     {
       boolean
     }

# Whether the alert is writable or not.
get_alerts_response_alert_writable
 = element writable
     {
       boolean
     }

# Creation time of the alert.
get_alerts_response_alert_creation_time
 = element creation_time
     {
       iso_time
     }

# Last time the alert was modified.
get_alerts_response_alert_modification_time
 = element modification_time
     {
       iso_time
     }

# The condition that must be satisfied for the alert to occur.
get_alerts_response_alert_condition
 = element condition
     {
       text
       & get_alerts_response_alert_condition_data*
     }

# Some data that defines the condition.
get_alerts_response_alert_condition_data
 = element data
     {
       text
       & get_alerts_response_alert_condition_data_name
     }

# The name of the condition data.
get_alerts_response_alert_condition_data_name
 = element name
     {
       text
     }

# The event that must happen for the alert to occur.
get_alerts_response_alert_event
 = element event
     {
       text
       & get_alerts_response_alert_event_data*
     }

# Some data that defines the event.
get_alerts_response_alert_event_data
 = element data
     {
       text
       & get_alerts_response_alert_event_data_name
     }

# The name of the event data.
get_alerts_response_alert_event_data_name
 = element name
     {
       text
     }

# The method by which he alert must occur.
get_alerts_response_alert_method
 = element method
     {
       text
       & get_alerts_response_alert_method_data*
     }

# Some data that defines the method.
get_alerts_response_alert_method_data
 = element data
     {
       text
       & get_alerts_response_alert_method_data_name
     }

# The name of the method data.
get_alerts_response_alert_method_data_name
 = element name
     {
       text
     }

get_alerts_response_alert_filter
 = element filter
     {
       attribute id { uuid }?
       & get_alerts_response_alert_filter_name
       & get_alerts_response_alert_filter_trash
     }

# The name of the filter.
get_alerts_response_alert_filter_name
 = element name
     {
       name
     }

# Whether the filter is in the trashcan.
get_alerts_response_alert_filter_trash
 = element trash
     {
       boolean
     }

## Response to get_filters

get_filters_response
 = element get_filters_response
     {
       attribute status { status }
       & attribute status_text { text }
       & get_filters_response_filter*
       & get_filters_response_filters
       & get_filters_response_sort
       & get_filters_response_filters
       & get_filters_response_filter_count
     }

get_filters_response_filter
 = element filter
     {
       get_filters_response_filter_name
       & get_filters_response_filter_comment
       & get_filters_response_filter_term
       & get_filters_response_filter_type
       & get_filters_response_filter_creation_time
       & get_filters_response_filter_modification_time
       & get_filters_response_filter_in_use
       & get_filters_response_filter_writable
       & get_filters_response_filter_alerts?
     }

# The name of the filter.
get_filters_response_filter_name
 = element name
     {
       name
     }

# The comment on the filter.
get_filters_response_filter_comment
 = element comment
     {
       text
     }

# The filter term.
get_filters_response_filter_term
 = element term
     {
       text
     }

# Resource type filter applies to. Blank for all..
get_filters_response_filter_type
 = element type
     {
       text
     }

# Date and time the filter was created.
get_filters_response_filter_creation_time
 = element creation_time
     {
       iso_time
     }

# Date and time the filter was last modified.
get_filters_response_filter_modification_time
 = element modification_time
     {
       iso_time
     }

# Whether any tasks are using the filter.
get_filters_response_filter_in_use
 = element in_use
     {
       boolean
     }

# Whether the filter is writable.
get_filters_response_filter_writable
 = element writable
     {
       boolean
     }

# All alerts using the filter.
get_filters_response_filter_alerts
 = element alerts
     {
       get_filters_response_filter_alerts_alert*
     }

get_filters_response_filter_alerts_alert
 = element alert
     {
       attribute id { uuid }
       & get_filters_response_filter_alerts_alert_name
     }

# The name of the alert.
get_filters_response_filter_alerts_alert_name
 = element name
     {
       name
     }

get_filters_response_filters
 = element filters
     {
       # UUID of filter if any, else 0.
       attribute id { uuid }
       & get_filters_response_filters_term
     }

# Filter term.
get_filters_response_filters_term
 = element term
     {
       text
     }

get_filters_response_sort
 = element sort
     {
       text
       & get_filters_response_sort_field
     }

get_filters_response_sort_field
 = element field
     {
       get_filters_response_sort_field_order
     }

get_filters_response_sort_field_order
 = element order
     {
       xsd:token { pattern = "ascending|descending" }
     }

get_filters_response_filters
 = element filters
     {
       # First filter.
       attribute start {  }
       & # Maximum number of filters.
       attribute max {  }
     }

get_filters_response_filter_count
 = element filter_count
     {
       get_filters_response_filter_count_filtered
       & get_filters_response_filter_count_page
     }

# Number of filters after filtering.
get_filters_response_filter_count_filtered
 = element filtered
     {
       integer
     }

# Number of filters on current page.
get_filters_response_filter_count_page
 = element page
     {
       integer
     }

## Response to get_info

get_info_response
 = element get_info_response
     {
       attribute status { status }
       & attribute status_text { text }
       & get_info_response_info*
       & get_info_response_filters
       & get_info_response_sort
       & get_info_response_details
       & get_info_response_info_count
     }

get_info_response_info
 = element info
     {
       # A unique number identifying this info, if available.
       attribute id { integer }?
       & get_info_response_info_name
       & get_info_response_info_comment
       & get_info_response_info_creation_time
       & get_info_response_info_modification_time
       & get_info_response_info_update_time
       & get_info_response_info_cpe?
       & get_info_response_info_cve?
       & get_info_response_info_dfn_cert_adv?
       & get_info_response_info_ovaldef?
       & get_info_response_info_nvt?
     }

# The name of the info.
get_info_response_info_name
 = element name
     {
       name
     }

# The comment on the info.
get_info_response_info_comment
 = element comment
     {
       text
     }

# Date and time the info was created.
get_info_response_info_creation_time
 = element creation_time
     {
       iso_time
     }

# Date and time the info was last modified.
get_info_response_info_modification_time
 = element modification_time
     {
       iso_time
     }

# Date and time the source of the info was read.
get_info_response_info_update_time
 = element update_time
     {
       iso_time
     }

# A CPE info element.
get_info_response_info_cpe
 = element cpe
     {
       get_info_response_info_cpe_title?
       & get_info_response_info_cpe_max_cvss
       & get_info_response_info_cpe_cve_refs
       & get_info_response_info_cpe_status
       & get_info_response_info_cpe_deprecated_by?
       & get_info_response_info_cpe_cves?
       & get_info_response_info_cpe_raw_data?
     }

# The title of the CPE.
get_info_response_info_cpe_title
 = element title
     {
       text
     }

# The highest CVSS recorder for this CPE.
get_info_response_info_cpe_max_cvss
 = element max_cvss
     {
       integer
     }

# The number CVE of references to this CPE.
get_info_response_info_cpe_cve_refs
 = element cve_refs
     {
       integer
     }

# The status of this CPE.
get_info_response_info_cpe_status
 = element status
     {
       text
     }

# NVD id of the deprecating CPE.
get_info_response_info_cpe_deprecated_by
 = element deprecated_by
     {
       integer
     }

# CVEs referring to this CPE. Only when details were requested.
get_info_response_info_cpe_cves
 = element cves
     {
       get_info_response_info_cpe_cves_cve?
     }

# CVE referring to this CPE.
get_info_response_info_cpe_cves_cve
 = element cve
     {
       text
     }

# Source representation of the information. Only when details were requested.
get_info_response_info_cpe_raw_data
 = element raw_data
     {
       text
     }

# A NVT info element.
get_info_response_info_nvt
 = element nvt
     {
       text
     }

# A CVE info element.
get_info_response_info_cve
 = element cve
     {
       get_info_response_info_cve_cvss?
       & get_info_response_info_cve_vector?
       & get_info_response_info_cve_complexity?
       & get_info_response_info_cve_authentication?
       & get_info_response_info_cve_confidentiality_impact?
       & get_info_response_info_cve_integrity_impact?
       & get_info_response_info_cve_availability_impact?
       & get_info_response_info_cve_description
       & get_info_response_info_cve_products
       & get_info_response_info_cve_nvts?
       & get_info_response_info_cve_cert?
       & get_info_response_info_cve_raw_data?
     }

# CVSS Base Score.
get_info_response_info_cve_cvss
 = element cvss
     {
       text
     }

# CVSS Access Vector metric.
get_info_response_info_cve_vector
 = element vector
     {
       text
     }

# CVSS Attack Complexity metric.
get_info_response_info_cve_complexity
 = element complexity
     {
       text
     }

# CVSS Authentication metric.
get_info_response_info_cve_authentication
 = element authentication
     {
       text
     }

# CVSS Confidentiality impact metric.
get_info_response_info_cve_confidentiality_impact
 = element confidentiality_impact
     {
       text
     }

# CVSS Integrity impact metric.
get_info_response_info_cve_integrity_impact
 = element integrity_impact
     {
       text
     }

# CVSS Availability impact metric.
get_info_response_info_cve_availability_impact
 = element availability_impact
     {
       text
     }

# The CVE's description.
get_info_response_info_cve_description
 = element description
     {
       text
     }

# Space separated list of CPEs affected by this.
get_info_response_info_cve_products
 = element products
     {
       text
     }

# NVTs addressing this CVE. Only when details were requested.
get_info_response_info_cve_nvts
 = element nvts
     {
       get_info_response_info_cve_nvts_nvt?
     }

# NVT referring to this CPE.
get_info_response_info_cve_nvts_nvt
 = element nvt
     {
       attribute oid { oid }?
       & get_info_response_info_cve_nvts_nvt_name
     }

# Name of the NVT.
get_info_response_info_cve_nvts_nvt_name
 = element name
     {
       text
     }

# List of CERT advisories referencing this CVE.
get_info_response_info_cve_cert
 = element cert
     {
       get_info_response_info_cve_cert_cert_ref*
       & get_info_response_info_cve_cert_warning?
     }

# A CERT advisory reference.
get_info_response_info_cve_cert_cert_ref
 = element cert_ref
     {
       # Type of the advisory (e.g. "DFN-CERT", "CERT-BUND").
       attribute type { text }?
       & get_info_response_info_cve_cert_cert_ref_name
       & get_info_response_info_cve_cert_cert_ref_title
     }

# The name / ID of the advisory.
get_info_response_info_cve_cert_cert_ref_name
 = element name
     {
       text
     }

# The title of the advisory.
get_info_response_info_cve_cert_cert_ref_title
 = element title
     {
       text
     }

# A warning message, e.g. when the database is not..
get_info_response_info_cve_cert_warning
 = element warning
     {
       text
     }

# Source representation of the information. Only when details were requested.
get_info_response_info_cve_raw_data
 = element raw_data
     {
       text
     }

# An DFN-CERT advisory info element.
get_info_response_info_dfn_cert_adv
 = element dfn_cert_adv
     {
       get_info_response_info_dfn_cert_adv_title
       & get_info_response_info_dfn_cert_adv_summary
       & get_info_response_info_dfn_cert_adv_cve_refs
       & get_info_response_info_dfn_cert_adv_raw_data?
     }

# Title of the advisory.
get_info_response_info_dfn_cert_adv_title
 = element title
     {
       text
     }

# Summary text of the advisory.
get_info_response_info_dfn_cert_adv_summary
 = element summary
     {
       text
     }

# Number of CVEs referenced by this advisory.
get_info_response_info_dfn_cert_adv_cve_refs
 = element cve_refs
     {
       integer
     }

# Source representation of the information. Only when details were requested.
get_info_response_info_dfn_cert_adv_raw_data
 = element raw_data
     {
       text
     }

# An OVAL definition info element.
get_info_response_info_ovaldef
 = element ovaldef
     {
       get_info_response_info_ovaldef_version
       & get_info_response_info_ovaldef_deprecated
       & get_info_response_info_ovaldef_def_class
       & get_info_response_info_ovaldef_title
       & get_info_response_info_ovaldef_status
       & get_info_response_info_ovaldef_description?
       & get_info_response_info_ovaldef_xml_file?
       & get_info_response_info_ovaldef_raw_data?
     }

# Version number of the OVAL definition.
get_info_response_info_ovaldef_version
 = element version
     {
       integer
     }

# Whether the definition is deprecated.
get_info_response_info_ovaldef_deprecated
 = element deprecated
     {
       boolean
     }

# Definition class of the definition.
get_info_response_info_ovaldef_def_class
 = element def_class
     {
       text
     }

# Title of the definition.
get_info_response_info_ovaldef_title
 = element title
     {
       text
     }

# Lifecycle status text of the definition.
get_info_response_info_ovaldef_status
 = element status
     {
       text
     }

# Longer description of the definition. Only when details were requested.
get_info_response_info_ovaldef_description
 = element description
     {
       text
     }

# Path to the source xml file, relative to the SCAP data directory. Only when details were requested.
get_info_response_info_ovaldef_xml_file
 = element xml_file
     {
       text
     }

# Source representation of the information. Only when details were requested.
get_info_response_info_ovaldef_raw_data
 = element raw_data
     {
       text
     }

get_info_response_filters
 = element filters
     {
       # UUID of filter if any, else 0.
       attribute id { uuid }
       & get_info_response_filters_term
     }

# Filter term.
get_info_response_filters_term
 = element term    # type text
     {
     }

get_info_response_sort
 = element sort
     {
       text
       & get_info_response_sort_field
     }

get_info_response_sort_field
 = element field
     {
       get_info_response_sort_field_order
     }

get_info_response_sort_field_order
 = element order
     {
       xsd:token { pattern = "ascending|descending" }
     }

get_info_response_filters
 = element filters
     {
       # First filter.
       attribute start { integer }
       & # Maximum number of filters.
       attribute max { integer }
     }

get_info_response_info_count
 = element info_count
     {
       get_info_response_info_count_filtered
       & get_info_response_info_count_page
     }

# Number of info elements after filtering.
get_info_response_info_count_filtered
 = element filtered
     {
       integer
     }

# Number of info elements on current page.
get_info_response_info_count_page
 = element page
     {
       integer
     }

# Are details included in this response.
get_info_response_details
 = element details    # type boolean
     {
     }

## Response to get_lsc_credentials

get_lsc_credentials_response
 = element get_lsc_credentials_response
     {
       attribute status { status }
       & attribute status_text { text }
       & get_lsc_credentials_response_lsc_credential*
     }

get_lsc_credentials_response_lsc_credential
 = element lsc_credential
     {
       attribute id { uuid }
       & get_lsc_credentials_response_lsc_credential_name
       & get_lsc_credentials_response_lsc_credential_login
       & get_lsc_credentials_response_lsc_credential_comment
       & get_lsc_credentials_response_lsc_credential_creation_time
       & get_lsc_credentials_response_lsc_credential_modification_time
       & get_lsc_credentials_response_lsc_credential_writable
       & get_lsc_credentials_response_lsc_credential_in_use
       & get_lsc_credentials_response_lsc_credential_type
       & get_lsc_credentials_response_lsc_credential_targets
       & get_lsc_credentials_response_lsc_credential_public_key?
       & get_lsc_credentials_response_lsc_credential_package?
     }

# The name of the LSC credential.
get_lsc_credentials_response_lsc_credential_name
 = element name
     {
       name
     }

# The username of the LSC credential.
get_lsc_credentials_response_lsc_credential_login
 = element login
     {
       name
     }

# The comment on the LSC credential.
get_lsc_credentials_response_lsc_credential_comment
 = element comment
     {
       text
     }

# Date and time the info was created.
get_lsc_credentials_response_lsc_credential_creation_time
 = element creation_time
     {
       iso_time
     }

# Date and time the info was last modified.
get_lsc_credentials_response_lsc_credential_modification_time
 = element modification_time
     {
       iso_time
     }

# Whether this credential is writable.
get_lsc_credentials_response_lsc_credential_writable
 = element writable
     {
       boolean
     }

# Whether any targets are using the LSC credential.
get_lsc_credentials_response_lsc_credential_in_use
 = element in_use
     {
       boolean
     }

# The type of the LSC credential.
get_lsc_credentials_response_lsc_credential_type
 = element type
     {
       xsd:token { pattern = "gen|pass" }
     }

# All targets using this LSC credential.
get_lsc_credentials_response_lsc_credential_targets
 = element targets
     {
       get_lsc_credentials_response_lsc_credential_targets_target*
     }

get_lsc_credentials_response_lsc_credential_targets_target
 = element target
     {
       attribute id { uuid }
       & get_lsc_credentials_response_lsc_credential_targets_target_name
     }

# The name of the target.
get_lsc_credentials_response_lsc_credential_targets_target_name
 = element name
     {
       name
     }

get_lsc_credentials_response_lsc_credential_public_key
 = element public_key
     {
       text
     }

get_lsc_credentials_response_lsc_credential_package
 = element package
     {
       base64
       & attribute format { xsd:token { pattern = "rpm|deb|exe" } }
     }

## Response to get_notes

get_notes_response
 = element get_notes_response
     {
       attribute status { status }
       & attribute status_text { text }
       & get_notes_response_note*
       & get_notes_response_filters
       & get_notes_response_sort
       & get_notes_response_notes
       & get_notes_response_note_count
     }

get_notes_response_filters
 = element filters
     {
       # UUID of filter if any, else 0.
       attribute id { uuid }
       & get_notes_response_filters_term
     }

# Filter term.
get_notes_response_filters_term
 = element term
     {
       text
     }

get_notes_response_sort
 = element sort
     {
       text
       & get_notes_response_sort_field
     }

get_notes_response_sort_field
 = element field
     {
       get_notes_response_sort_field_order
     }

get_notes_response_sort_field_order
 = element order
     {
       xsd:token { pattern = "ascending|descending" }
     }

get_notes_response_notes
 = element notes
     {
       # First note.
       attribute start {  }
       & # Maximum number of notes.
       attribute max {  }
     }

get_notes_response_note_count
 = element note_count
     {
       get_notes_response_note_count_filtered
       & get_notes_response_note_count_page
     }

# Number of notes after filtering.
get_notes_response_note_count_filtered
 = element filtered
     {
       integer
     }

# Number of notes on current page.
get_notes_response_note_count_page
 = element page
     {
       integer
     }

get_notes_response_note
 = element note
     {
       get_notes_response_note_nvt
       & get_notes_response_note_text
       & get_notes_response_note_orphan
       & ( get_notes_response_note_creation_time
           & get_notes_response_note_modification_time
           & get_notes_response_note_hosts
           & get_notes_response_note_port
           & get_notes_response_note_threat
           & get_notes_response_note_task
           & get_notes_response_note_active
           & get_notes_response_note_end_time?
           & get_notes_response_note_result? )?
     }

get_notes_response_note_nvt
 = element nvt
     {
       attribute oid { oid }
       & get_notes_response_note_nvt_name
     }

get_notes_response_note_nvt_name
 = element name
     {
       name
     }

# The text of the note.
get_notes_response_note_text
 = element text
     {
       text
       & attribute excerpt { boolean }
     }

# Whether the note is an orphan.
get_notes_response_note_orphan
 = element orphan
     {
       boolean
     }

get_notes_response_note_creation_time
 = element creation_time
     {
       iso_time
     }

get_notes_response_note_modification_time
 = element modification_time
     {
       iso_time
     }

# A textual list of hosts.
get_notes_response_note_hosts
 = element hosts
     {
       text
     }

# Port to which note applies.
get_notes_response_note_port
 = element port
     {
       text
     }

# Threat level to which note applies.
get_notes_response_note_threat
 = element threat
     {
       threat
     }

# Task to which note applies.
get_notes_response_note_task
 = element task
     {
       attribute id { uuid }
     }

# Whether the note is active.
get_notes_response_note_active
 = element active
     {
       integer
     }

# End time of the note in case of limit, else empty.
get_notes_response_note_end_time
 = element end_time
     {
       text
     }

# Result to which note applies.
get_notes_response_note_result
 = element result
     {
       attribute id { uuid }
       & get_notes_response_note_result_subnet
       & get_notes_response_note_result_host
       & get_notes_response_note_result_port
       & get_notes_response_note_result_nvt
       & get_notes_response_note_result_threat
       & get_notes_response_note_result_description
     }

get_notes_response_note_result_subnet
 = element subnet
     {
       text
     }

get_notes_response_note_result_host
 = element host
     {
       text
     }

get_notes_response_note_result_port
 = element port
     {
       text
     }

get_notes_response_note_result_nvt
 = element nvt
     {
       attribute oid { oid }
       & get_notes_response_note_result_nvt_name
       & get_notes_response_note_result_nvt_cvss_base
       & get_notes_response_note_result_nvt_risk_factor
       & get_notes_response_note_result_nvt_cve?
       & get_notes_response_note_result_nvt_bid?
     }

get_notes_response_note_result_nvt_name
 = element name
     {
       name
     }

get_notes_response_note_result_nvt_cvss_base
 = element cvss_base
     {
       text
     }

get_notes_response_note_result_nvt_risk_factor
 = element risk_factor
     {
       text
     }

# CVE value associated with the NVT.
get_notes_response_note_result_nvt_cve
 = element cve
     {
       text
     }

# BID associated with the NVT.
get_notes_response_note_result_nvt_bid
 = element bid
     {
       integer
     }

get_notes_response_note_result_threat
 = element threat
     {
       threat
     }

get_notes_response_note_result_description
 = element description
     {
       text
     }

## Response to get_nvts

get_nvts_response
 = element get_nvts_response
     {
       attribute status { status }
       & attribute status_text { text }
       & get_nvts_response_nvt
     }

get_nvts_response_nvt
 = element nvt
     {
       attribute id { uuid }
       & get_nvts_response_nvt_name
       & get_nvts_response_nvt_checksum
       & get_nvts_response_nvt_creation_time
       & get_nvts_response_nvt_modification_time
       & ( get_nvts_response_nvt_category
           & get_nvts_response_nvt_copyright
           & get_nvts_response_nvt_description
           & get_nvts_response_nvt_summary
           & get_nvts_response_nvt_family
           & get_nvts_response_nvt_version
           & get_nvts_response_nvt_cvss_base
           & get_nvts_response_nvt_risk_factor
           & get_nvts_response_nvt_cve_id
           & get_nvts_response_nvt_cert_refs
           & get_nvts_response_nvt_bugtraq_id
           & get_nvts_response_nvt_xrefs
           & get_nvts_response_nvt_fingerprints
           & get_nvts_response_nvt_tags
           & get_nvts_response_nvt_preference_count?
           & get_nvts_response_nvt_timeout?
           & get_nvts_response_nvt_preferences? )?
     }

# The name of the NVT.
get_nvts_response_nvt_name
 = element name
     {
       name
     }

get_nvts_response_nvt_category
 = element category
     {
       text
     }

get_nvts_response_nvt_creation_time
 = element creation_time
     {
       iso_time
     }

get_nvts_response_nvt_modification_time
 = element modification_time
     {
       iso_time
     }

get_nvts_response_nvt_copyright
 = element copyright
     {
       text
     }

get_nvts_response_nvt_description
 = element description
     {
       text
     }

get_nvts_response_nvt_summary
 = element summary
     {
       text
     }

get_nvts_response_nvt_family
 = element family
     {
       text
     }

get_nvts_response_nvt_version
 = element version
     {
       text
     }

get_nvts_response_nvt_cvss_base
 = element cvss_base
     {
       text
     }

get_nvts_response_nvt_risk_factor
 = element risk_factor
     {
       text
     }

get_nvts_response_nvt_cve_id
 = element cve_id
     {
       text
     }

get_nvts_response_nvt_bugtraq_id
 = element bugtraq_id
     {
       text
     }

# List of CERT advisories referencing this NVT via CVEs.
get_nvts_response_nvt_cert_refs
 = element cert_refs
     {
       get_nvts_response_nvt_cert_refs_cert_ref*
       & get_nvts_response_nvt_cert_refs_warning?
     }

# A CERT advisory reference.
get_nvts_response_nvt_cert_refs_cert_ref
 = element cert_ref
     {
       # ID of the advisory.
       attribute id { text }?
       & # Type of the advisory (e.g. "DFN-CERT", "CERT-BUND").
       attribute type { text }?
     }

# A warning message, e.g. when the database is not..
get_nvts_response_nvt_cert_refs_warning
 = element warning
     {
       text
     }

get_nvts_response_nvt_xrefs
 = element xrefs
     {
       text
     }

get_nvts_response_nvt_fingerprints
 = element fingerprints
     {
       text
     }

get_nvts_response_nvt_tags
 = element tags
     {
       text
     }

get_nvts_response_nvt_preference_count
 = element preference_count
     {
       text
     }

get_nvts_response_nvt_timeout
 = element timeout
     {
       text
     }

get_nvts_response_nvt_checksum
 = element checksum
     {
       text
       & get_nvts_response_nvt_checksum_algorithm
     }

get_nvts_response_nvt_checksum_algorithm
 = element algorithm
     {
       text
     }

get_nvts_response_nvt_preferences
 = element preferences
     {
       text
       & get_nvts_response_nvt_preferences_timeout
       & get_nvts_response_nvt_preferences_preference*
     }

get_nvts_response_nvt_preferences_timeout
 = element timeout
     {
       text
     }

get_nvts_response_nvt_preferences_preference
 = element preference
     {
       get_nvts_response_nvt_preferences_preference_nvt
       & get_nvts_response_nvt_preferences_preference_name
       & get_nvts_response_nvt_preferences_preference_type
       & get_nvts_response_nvt_preferences_preference_value
     }

get_nvts_response_nvt_preferences_preference_nvt
 = element nvt
     {
       oid
     }

get_nvts_response_nvt_preferences_preference_name
 = element name
     {
       text
     }

get_nvts_response_nvt_preferences_preference_type
 = element type
     {
       text
     }

get_nvts_response_nvt_preferences_preference_value
 = element value
     {
       text
     }

## Response to get_nvt_families

get_nvt_families_response
 = element get_nvt_families_response
     {
       attribute status { status }
       & attribute status_text { text }
       & get_nvt_families_response_families
     }

get_nvt_families_response_families
 = element families
     {
       get_nvt_families_response_families_family*
     }

get_nvt_families_response_families_family
 = element family
     {
       get_nvt_families_response_families_family_name
       & get_nvt_families_response_families_family_max_nvt_count
     }

# The name of the family.
get_nvt_families_response_families_family_name
 = element name
     {
       name
     }

# The number of NVTs in the family.
get_nvt_families_response_families_family_max_nvt_count
 = element max_nvt_count
     {
       integer
     }

## Response to get_nvt_feed_checksum

get_nvt_feed_checksum_response
 = element get_nvt_feed_checksum_response
     {
       attribute status { status }
       & attribute status_text { text }
       & get_nvt_feed_checksum_response_checksum
     }

get_nvt_feed_checksum_response_checksum
 = element checksum
     {
       text # RNC limitation: base64
       & attribute algorithm { text }
     }

## Response to get_overrides

get_overrides_response
 = element get_overrides_response
     {
       attribute status { status }
       & attribute status_text { text }
       & get_overrides_response_override*
       & get_overrides_response_filters
       & get_overrides_response_sort
       & get_overrides_response_overrides
       & get_overrides_response_override_count
     }

get_overrides_response_filters
 = element filters
     {
       # UUID of filter if any, else 0.
       attribute id { uuid }
       & get_overrides_response_filters_term
     }

# Filter term.
get_overrides_response_filters_term
 = element term
     {
       text
     }

get_overrides_response_sort
 = element sort
     {
       text
       & get_overrides_response_sort_field
     }

get_overrides_response_sort_field
 = element field
     {
       get_overrides_response_sort_field_order
     }

get_overrides_response_sort_field_order
 = element order
     {
       xsd:token { pattern = "ascending|descending" }
     }

get_overrides_response_overrides
 = element overrides
     {
       # First override.
       attribute start {  }
       & # Maximum number of overrides.
       attribute max {  }
     }

get_overrides_response_override_count
 = element override_count
     {
       get_overrides_response_override_count_filtered
       & get_overrides_response_override_count_page
     }

# Number of overrides after filtering.
get_overrides_response_override_count_filtered
 = element filtered
     {
       integer
     }

# Number of overrides on current page.
get_overrides_response_override_count_page
 = element page
     {
       integer
     }

get_overrides_response_override
 = element override
     {
       get_overrides_response_override_nvt
       & get_overrides_response_override_creation_time
       & get_overrides_response_override_modification_time
       & get_overrides_response_override_writable
       & get_overrides_response_override_in_use
       & get_overrides_response_override_text
       & get_overrides_response_override_threat
       & get_overrides_response_override_new_threat
       & get_overrides_response_override_orphan
       & ( get_overrides_response_override_hosts
           & get_overrides_response_override_port
           & get_overrides_response_override_task
           & get_overrides_response_override_active
           & get_overrides_response_override_end_time?
           & get_overrides_response_override_result? )?
     }

get_overrides_response_override_nvt
 = element nvt
     {
       attribute oid { oid }
       & get_overrides_response_override_nvt_name
     }

get_overrides_response_override_nvt_name
 = element name
     {
       name
     }

# The text of the override.
get_overrides_response_override_text
 = element text
     {
       text
       & attribute excerpt { boolean }
     }

get_overrides_response_override_creation_time
 = element creation_time
     {
       iso_time
     }

get_overrides_response_override_modification_time
 = element modification_time
     {
       iso_time
     }

get_overrides_response_override_writable
 = element writable
     {
       boolean
     }

get_overrides_response_override_in_use
 = element in_use
     {
       boolean
     }

# Threat level to which override applies.
get_overrides_response_override_threat
 = element threat
     {
       threat
     }

# New threat for result.
get_overrides_response_override_new_threat
 = element new_threat
     {
       threat
     }

# Whether the override is an orphan.
get_overrides_response_override_orphan
 = element orphan
     {
       boolean
     }

# A textual list of hosts.
get_overrides_response_override_hosts
 = element hosts
     {
       text
     }

# Port to which override applies.
get_overrides_response_override_port
 = element port
     {
       text
     }

# Task to which override applies.
get_overrides_response_override_task
 = element task
     {
       attribute id { uuid }
     }

# Whether the override is active.
get_overrides_response_override_active
 = element active
     {
       integer
     }

# Override end time in case of limit, else empty.
get_overrides_response_override_end_time
 = element end_time
     {
       text
     }

# Result to which override applies.
get_overrides_response_override_result
 = element result
     {
       attribute id { uuid }
       & get_overrides_response_override_result_subnet
       & get_overrides_response_override_result_host
       & get_overrides_response_override_result_port
       & get_overrides_response_override_result_nvt
       & get_overrides_response_override_result_threat
       & get_overrides_response_override_result_description
     }

get_overrides_response_override_result_subnet
 = element subnet
     {
       text
     }

get_overrides_response_override_result_host
 = element host
     {
       text
     }

get_overrides_response_override_result_port
 = element port
     {
       text
     }

get_overrides_response_override_result_nvt
 = element nvt
     {
       attribute oid { oid }
       & get_overrides_response_override_result_nvt_name
       & get_overrides_response_override_result_nvt_cvss_base
       & get_overrides_response_override_result_nvt_risk_factor
       & get_overrides_response_override_result_nvt_cve?
       & get_overrides_response_override_result_nvt_bid?
     }

get_overrides_response_override_result_nvt_name
 = element name
     {
       name
     }

get_overrides_response_override_result_nvt_cvss_base
 = element cvss_base
     {
       text
     }

get_overrides_response_override_result_nvt_risk_factor
 = element risk_factor
     {
       text
     }

# CVE value associated with the NVT.
get_overrides_response_override_result_nvt_cve
 = element cve
     {
       text
     }

# BID associated with the NVT.
get_overrides_response_override_result_nvt_bid
 = element bid
     {
       integer
     }

get_overrides_response_override_result_threat
 = element threat
     {
       threat
     }

get_overrides_response_override_result_description
 = element description
     {
       text
     }

## Response to get_port_lists

get_port_lists_response
 = element get_port_lists_response
     {
       attribute status { status }
       & attribute status_text { text }
       & get_port_lists_response_port_list*
     }

get_port_lists_response_port_list
 = element port_list
     {
       attribute id { uuid }
       & get_port_lists_response_port_list_name
       & get_port_lists_response_port_list_comment
       & get_port_lists_response_port_list_creation_time
       & get_port_lists_response_port_list_modification_time
       & get_port_lists_response_port_list_writable
       & get_port_lists_response_port_list_in_use
       & get_port_lists_response_port_list_port_count
       & ( get_port_lists_response_port_list_port_ranges
           & get_port_lists_response_port_list_targets )?
     }

# The name of the port list.
get_port_lists_response_port_list_name
 = element name
     {
       name
     }

# The comment on the port list.
get_port_lists_response_port_list_comment
 = element comment
     {
       text
     }

get_port_lists_response_port_list_creation_time
 = element creation_time
     {
       iso_time
     }

get_port_lists_response_port_list_modification_time
 = element modification_time
     {
       iso_time
     }

# Whether the port list is writable.
get_port_lists_response_port_list_writable
 = element writable
     {
       boolean
     }

# Whether any targets are using the port list.
get_port_lists_response_port_list_in_use
 = element in_use
     {
       boolean
     }

get_port_lists_response_port_list_port_count
 = element port_count
     {
       get_port_lists_response_port_list_port_count_all
       & get_port_lists_response_port_list_port_count_tcp
       & get_port_lists_response_port_list_port_count_udp
     }

# Total number of ports.
get_port_lists_response_port_list_port_count_all
 = element all
     {
       integer
     }

# Total number of TCP ports.
get_port_lists_response_port_list_port_count_tcp
 = element tcp
     {
       integer
     }

# Total number of UDP ports.
get_port_lists_response_port_list_port_count_udp
 = element udp
     {
       integer
     }

get_port_lists_response_port_list_port_ranges
 = element port_ranges
     {
       get_port_lists_response_port_list_port_ranges_port_range*
     }

get_port_lists_response_port_list_port_ranges_port_range
 = element port_range
     {
       attribute id { uuid }
       & get_port_lists_response_port_list_port_ranges_port_range_start
       & get_port_lists_response_port_list_port_ranges_port_range_end
       & get_port_lists_response_port_list_port_ranges_port_range_type
       & get_port_lists_response_port_list_port_ranges_port_range_comment
     }

# First port in range.
get_port_lists_response_port_list_port_ranges_port_range_start
 = element start
     {
       integer
     }

# Last port in range.
get_port_lists_response_port_list_port_ranges_port_range_end
 = element end
     {
       integer
     }

# The type of port: TCP, UDP, ....
get_port_lists_response_port_list_port_ranges_port_range_type
 = element type
     {
       text
     }

# The comment on the port range.
get_port_lists_response_port_list_port_ranges_port_range_comment
 = element comment
     {
       text
     }

# The targets using the port list.
get_port_lists_response_port_list_targets
 = element targets
     {
       get_port_lists_response_port_list_targets_target*
     }

get_port_lists_response_port_list_targets_target
 = element target
     {
       attribute id { uuid }
       & get_port_lists_response_port_list_targets_target_name
     }

# The name of the target.
get_port_lists_response_port_list_targets_target_name
 = element name
     {
       name
     }

## Response to get_preferences

get_preferences_response
 = element get_preferences_response
     {
       attribute status { status }
       & attribute status_text { text }
       & get_preferences_response_preference*
     }

get_preferences_response_preference
 = element preference
     {
       get_preferences_response_preference_nvt?
       & get_preferences_response_preference_name
       & get_preferences_response_preference_type?
       & get_preferences_response_preference_value
     }

# NVT to which preference applies.
get_preferences_response_preference_nvt
 = element nvt
     {
       attribute oid { oid }
       & get_preferences_response_preference_nvt_name
     }

# The name of the NVT.
get_preferences_response_preference_nvt_name
 = element name
     {
       name
     }

# The name of the preference.
get_preferences_response_preference_name
 = element name
     {
       name
     }

# The type of preference.
get_preferences_response_preference_type
 = element type
     {
       text
     }

# The value of the preference.
get_preferences_response_preference_value
 = element value
     {
       text
     }

## Response to get_reports

get_reports_response
 = element get_reports_response
     {
       attribute status { status }
       & attribute status_text { text }
       & get_reports_response_report*
     }

# Actually attributes and either base64 or a report.
get_reports_response_report
 = element report    # type report
     {
       text # RNC limitation: base64
       & attribute id { uuid }
       & attribute format_id { uuid }
       & attribute extension { text }
       & attribute content_type { text }
       & attribute type { xsd:token { pattern = "scan|assets" } }?
       & report_report
     }

## Response to get_report_formats

get_report_formats_response
 = element get_report_formats_response
     {
       attribute status { status }
       & attribute status_text { text }
       & get_report_formats_response_report_format*
     }

get_report_formats_response_report_format
 = element report_format
     {
       attribute id { uuid }
       & get_report_formats_response_report_format_name
       & get_report_formats_response_report_format_creation_time
       & get_report_formats_response_report_format_modification_time
       & get_report_formats_response_report_format_writable
       & get_report_formats_response_report_format_in_use
       & get_report_formats_response_report_format_extension
       & get_report_formats_response_report_format_content_type
       & get_report_formats_response_report_format_summary
       & get_report_formats_response_report_format_description
       & get_report_formats_response_report_format_global
       & get_report_formats_response_report_format_predefined
       & ( ( get_report_formats_response_report_format_file*
           & get_report_formats_response_report_format_signature )
           | ( get_report_formats_response_report_format_trust
           & get_report_formats_response_report_format_active ) )
       & get_report_formats_response_report_format_param*
     }

# The name of the report format.
get_report_formats_response_report_format_name
 = element name
     {
       name
     }

get_report_formats_response_report_format_creation_time
 = element creation_time
     {
       iso_time
     }

get_report_formats_response_report_format_modification_time
 = element modification_time
     {
       iso_time
     }

# Whether the report format is global or in use.
get_report_formats_response_report_format_writable
 = element writable
     {
       boolean
     }

# Whether any alerts are using the report format.
get_report_formats_response_report_format_in_use
 = element in_use
     {
       boolean
     }

get_report_formats_response_report_format_summary
 = element summary
     {
       text
     }

get_report_formats_response_report_format_description
 = element description
     {
       text
     }

get_report_formats_response_report_format_extension
 = element extension
     {
       text
     }

get_report_formats_response_report_format_global
 = element global
     {
       boolean
     }

get_report_formats_response_report_format_content_type
 = element content_type
     {
       text
     }

get_report_formats_response_report_format_predefined
 = element predefined
     {
       boolean
     }

get_report_formats_response_report_format_param
 = element param
     {
       get_report_formats_response_report_format_param_name
       & get_report_formats_response_report_format_param_type
       & get_report_formats_response_report_format_param_value
       & get_report_formats_response_report_format_param_default
     }

# The name of the param.
get_report_formats_response_report_format_param_name
 = element name
     {
       name
     }

# The type of the param.
get_report_formats_response_report_format_param_type
 = element type
     {
       text # RNC limitation: xsd:token { pattern = "boolean|integer|selection|string|text" }
       & get_report_formats_response_report_format_param_type_min?
       & get_report_formats_response_report_format_param_type_max?
       & get_report_formats_response_report_format_param_type_options?
     }

# Minimum.
get_report_formats_response_report_format_param_type_min
 = element min
     {
       text
     }

# Maximum.
get_report_formats_response_report_format_param_type_max
 = element max
     {
       text
     }

# Selection options.
get_report_formats_response_report_format_param_type_options
 = element options
     {
       get_report_formats_response_report_format_param_type_options_option*
     }

# Option value.
get_report_formats_response_report_format_param_type_options_option
 = element option
     {
       text
     }

# The value of the param.
get_report_formats_response_report_format_param_value
 = element value
     {
       text
     }

# The fallback value of the param.
get_report_formats_response_report_format_param_default
 = element default
     {
       text
     }

# One of the files used to generate the report.
get_report_formats_response_report_format_file
 = element file
     {
       text # RNC limitation: base64
       & attribute name { text }
     }

# The report format signature.
get_report_formats_response_report_format_signature
 = element signature
     {
       text
     }

# Whether signature verification succeeded.
get_report_formats_response_report_format_trust
 = element trust
     {
       text # RNC limitation: xsd:token { pattern = "yes|no|unknown" }
       & attribute name { text }
       & get_report_formats_response_report_format_trust_time
     }

# The time the trust was checked.
get_report_formats_response_report_format_trust_time
 = element time
     {
       iso_time
     }

# Whether the report format is active.
get_report_formats_response_report_format_active
 = element active
     {
       boolean
     }

## Response to get_results

get_results_response
 = element get_results_response
     {
       attribute status { status }
       & attribute status_text { text }
       & get_results_response_results
     }

get_results_response_results
 = element results
     {
       get_results_response_results_result*
     }

get_results_response_results_result
 = element result
     {
       attribute id { uuid }
       & get_results_response_results_result_subnet
       & get_results_response_results_result_host
       & get_results_response_results_result_port
       & get_results_response_results_result_nvt
       & get_results_response_results_result_threat
       & get_results_response_results_result_description
       & get_results_response_results_result_notes?
       & get_results_response_results_result_overrides?
     }

get_results_response_results_result_subnet
 = element subnet
     {
       text
     }

get_results_response_results_result_host
 = element host
     {
       text
     }

get_results_response_results_result_port
 = element port
     {
       text
     }

# NVT to which result applies.
get_results_response_results_result_nvt
 = element nvt
     {
       attribute oid { oid }
       & get_results_response_results_result_nvt_name
       & get_results_response_results_result_nvt_cvss_base
       & get_results_response_results_result_nvt_risk_factor
       & get_results_response_results_result_nvt_cve
       & get_results_response_results_result_nvt_bid
       & get_results_response_results_result_nvt_tags
       & get_results_response_results_result_nvt_cert
       & get_results_response_results_result_nvt_xref
     }

# The name of the NVT.
get_results_response_results_result_nvt_name
 = element name
     {
       name
     }

# CVSS base value associated with the NVT.
get_results_response_results_result_nvt_cvss_base
 = element cvss_base
     {
       integer
     }

# Risk factor associated with the NVT.
get_results_response_results_result_nvt_risk_factor
 = element risk_factor
     {
       integer
     }

# CVE value associated with the NVT.
get_results_response_results_result_nvt_cve
 = element cve
     {
       text
     }

# BID associated with the NVT.
get_results_response_results_result_nvt_bid
 = element bid
     {
       integer
     }

# Tags associated with the NVT.
get_results_response_results_result_nvt_tags
 = element tags
     {
       text
     }

# List of CERT advisories referencing this NVT via CVEs.
get_results_response_results_result_nvt_cert
 = element cert
     {
       get_results_response_results_result_nvt_cert_cert_ref*
     }

# A CERT advisory reference.
get_results_response_results_result_nvt_cert_cert_ref
 = element cert_ref
     {
       # ID of the advisory.
       attribute id { text }?
       & # Type of the advisory (e.g. "DFN-CERT", "CERT-BUND").
       attribute type { text }?
     }

# References associated with the NVT.
get_results_response_results_result_nvt_xref
 = element xref
     {
       text
     }

get_results_response_results_result_threat
 = element threat
     {
       threat
     }

# Description of the result.
get_results_response_results_result_description
 = element description
     {
       text
     }

get_results_response_results_result_notes
 = element notes    # type result_notes
     {
       result_notes_note*
     }

get_results_response_results_result_overrides
 = element overrides    # type result_overrides
     {
       result_overrides_override*
     }

## Response to get_schedules

get_schedules_response
 = element get_schedules_response
     {
       attribute status { status }
       & attribute status_text { text }
       & get_schedules_response_schedule*
     }

get_schedules_response_schedule
 = element schedule
     {
       attribute id { uuid }
       & get_schedules_response_schedule_name
       & get_schedules_response_schedule_comment
       & get_schedules_response_schedule_creation_time
       & get_schedules_response_schedule_modification_time
       & get_schedules_response_schedule_writable
       & get_schedules_response_schedule_in_use
       & get_schedules_response_schedule_first_time
       & get_schedules_response_schedule_next_time
       & get_schedules_response_schedule_timezone
       & get_schedules_response_schedule_period
       & get_schedules_response_schedule_period_months
       & get_schedules_response_schedule_simple_period
       & get_schedules_response_schedule_duration
       & get_schedules_response_schedule_simple_duration
       & ( get_schedules_response_schedule_tasks )?
     }

# The name of the schedule.
get_schedules_response_schedule_name
 = element name
     {
       name
     }

# The comment on the schedule.
get_schedules_response_schedule_comment
 = element comment
     {
       text
     }

get_schedules_response_schedule_creation_time
 = element creation_time
     {
       iso_time
     }

get_schedules_response_schedule_modification_time
 = element modification_time
     {
       iso_time
     }

# Whether the schedule is writable.
get_schedules_response_schedule_writable
 = element writable
     {
       boolean
     }

# Whether any tasks are using the schedule.
get_schedules_response_schedule_in_use
 = element in_use
     {
       boolean
     }

# First time the task ran or will run.
get_schedules_response_schedule_first_time
 = element first_time
     {
       iso_time
     }

# The next time the task will run.
get_schedules_response_schedule_next_time
 = element next_time
     {
       iso_time
     }

# The timezone that the schedule follows.
get_schedules_response_schedule_timezone
 = element timezone
     {
       text
     }

# How often the task will run, in seconds.
get_schedules_response_schedule_period
 = element period
     {
       integer
     }

# How often the task will run, months portion.
get_schedules_response_schedule_period_months
 = element period_months
     {
       integer
     }

# Simple representation of period, if available.
get_schedules_response_schedule_simple_period
 = element simple_period
     {
       text
       & get_schedules_response_schedule_simple_period_unit?
     }

get_schedules_response_schedule_simple_period_unit
 = element unit
     {
       time_unit
     }

# How long the task will run for (0 for entire task).
get_schedules_response_schedule_duration
 = element duration
     {
       integer
     }

# Simple representation of duration, if available.
get_schedules_response_schedule_simple_duration
 = element simple_duration
     {
       text
       & get_schedules_response_schedule_simple_duration_unit?
     }

get_schedules_response_schedule_simple_duration_unit
 = element unit
     {
       time_unit
     }

get_schedules_response_schedule_tasks
 = element tasks
     {
       get_schedules_response_schedule_tasks_task*
     }

get_schedules_response_schedule_tasks_task
 = element task
     {
       attribute id { uuid }
       & get_schedules_response_schedule_tasks_task_name
     }

# The name of the task.
get_schedules_response_schedule_tasks_task_name
 = element name
     {
       name
     }

## Response to get_settings

get_settings_response
 = element get_settings_response
     {
       attribute status { status }
       & attribute status_text { text }
       & get_settings_response_filters
       & get_settings_response_settings
     }

get_settings_response_filters
 = element filters
     {
       get_settings_response_filters_term
     }

# Filter term.
get_settings_response_filters_term
 = element term
     {
       text
     }

get_settings_response_settings
 = element settings
     {
       get_settings_response_settings_setting
     }

get_settings_response_settings_setting
 = element setting
     {
       get_settings_response_settings_setting_name
       & get_settings_response_settings_setting_value
     }

get_settings_response_settings_setting_name
 = element name
     {
       text
     }

get_settings_response_settings_setting_value
 = element value
     {
       text
     }

## Response to get_slaves

get_slaves_response
 = element get_slaves_response
     {
       attribute status { status }
       & attribute status_text { text }
       & get_slaves_response_slave*
     }

get_slaves_response_slave
 = element slave
     {
       attribute id { uuid }
       & get_slaves_response_slave_name
       & get_slaves_response_slave_comment
       & get_slaves_response_slave_creation_time
       & get_slaves_response_slave_modification_time
       & get_slaves_response_slave_writable
       & get_slaves_response_slave_in_use
       & get_slaves_response_slave_host
       & get_slaves_response_slave_port
       & get_slaves_response_slave_login
       & get_slaves_response_slave_tasks?
     }

# The name of the slave.
get_slaves_response_slave_name
 = element name
     {
       name
     }

# The comment on the slave.
get_slaves_response_slave_comment
 = element comment
     {
       text
     }

get_slaves_response_slave_creation_time
 = element creation_time
     {
       iso_time
     }

get_slaves_response_slave_modification_time
 = element modification_time
     {
       iso_time
     }

# Whether the slave is writable.
get_slaves_response_slave_writable
 = element writable
     {
       boolean
     }

# Whether any slaves are using the slave.
get_slaves_response_slave_in_use
 = element in_use
     {
       boolean
     }

# The host that the slave Manager is running on.
get_slaves_response_slave_host
 = element host
     {
       text
     }

# The port that the slave Manager is serving on the host.
get_slaves_response_slave_port
 = element port
     {
       text
     }

# Login name on the slave Manager.
get_slaves_response_slave_login
 = element login
     {
       text
     }

get_slaves_response_slave_tasks
 = element tasks
     {
       get_slaves_response_slave_tasks_task*
     }

get_slaves_response_slave_tasks_task
 = element task
     {
       attribute id { uuid }
       & get_slaves_response_slave_tasks_task_name
     }

# The name of the task.
get_slaves_response_slave_tasks_task_name
 = element name
     {
       name
     }

## Response to get_system_reports

get_system_reports_response
 = element get_system_reports_response
     {
       attribute status { status }
       & attribute status_text { text }
       & get_system_reports_response_system_report*
     }

get_system_reports_response_system_report
 = element system_report
     {
       get_system_reports_response_system_report_name
       & get_system_reports_response_system_report_title
       & get_system_reports_response_system_report_report?
     }

# The name of the system report.
get_system_reports_response_system_report_name
 = element name
     {
       name
     }

# The title of the system report.
get_system_reports_response_system_report_title
 = element title
     {
       text
     }

get_system_reports_response_system_report_report
 = element report
     {
       text # RNC limitation: base64
       & attribute format { "png" }
       & attribute duration { integer }
     }

## Response to get_target_locators

get_target_locators_response
 = element get_target_locators_response
     {
       attribute status { status }
       & attribute status_text { text }
       & get_target_locators_response_target_locator*
     }

get_target_locators_response_target_locator
 = element target_locator
     {
       get_target_locators_response_target_locator_name
     }

# The name of the target locator.
get_target_locators_response_target_locator_name
 = element name
     {
       name
     }

## Response to get_targets

get_targets_response
 = element get_targets_response
     {
       attribute status { status }
       & attribute status_text { text }
       & get_targets_response_target*
       & get_targets_response_filters
       & get_targets_response_sort
       & get_targets_response_targets
       & get_targets_response_target_count
     }

get_targets_response_target
 = element target
     {
       get_targets_response_target_name
       & get_targets_response_target_comment
       & get_targets_response_target_creation_time
       & get_targets_response_target_modification_time
       & get_targets_response_target_writable
       & get_targets_response_target_in_use
       & get_targets_response_target_hosts
       & get_targets_response_target_max_hosts
       & get_targets_response_target_ssh_lsc_credential
       & get_targets_response_target_smb_lsc_credential
       & get_targets_response_target_port_range
       & get_targets_response_target_port_list
       & get_targets_response_target_tasks?
     }

# The name of the target.
get_targets_response_target_name
 = element name
     {
       name
     }

# The comment on the target.
get_targets_response_target_comment
 = element comment
     {
       text
     }

# Date and time the target was created.
get_targets_response_target_creation_time
 = element creation_time
     {
       iso_time
     }

# Date and time the target was last modified.
get_targets_response_target_modification_time
 = element modification_time
     {
       iso_time
     }

# A list of hosts.
get_targets_response_target_hosts
 = element hosts
     {
       text
     }

# The maximum number of hosts defined by the target.
get_targets_response_target_max_hosts
 = element max_hosts
     {
       integer
     }

# Whether the target is writable.
get_targets_response_target_writable
 = element writable
     {
       boolean
     }

# Whether any tasks are using the target.
get_targets_response_target_in_use
 = element in_use
     {
       boolean
     }

get_targets_response_target_ssh_lsc_credential
 = element ssh_lsc_credential
     {
       attribute id { uuid_or_empty }
       & get_targets_response_target_ssh_lsc_credential_name
       & get_targets_response_target_ssh_lsc_credential_port
       & get_targets_response_target_ssh_lsc_credential_trash
     }

# The name of the SSH LSC credential.
get_targets_response_target_ssh_lsc_credential_name
 = element name
     {
       name
     }

# The port the LSCs will use.
get_targets_response_target_ssh_lsc_credential_port
 = element port
     {
       text
     }

# Whether the LSC credential is in the trashcan.
get_targets_response_target_ssh_lsc_credential_trash
 = element trash
     {
       boolean
     }

get_targets_response_target_smb_lsc_credential
 = element smb_lsc_credential
     {
       attribute id { uuid_or_empty }
       & get_targets_response_target_smb_lsc_credential_name
       & get_targets_response_target_smb_lsc_credential_trash
     }

# The name of the SMB LSC credential.
get_targets_response_target_smb_lsc_credential_name
 = element name
     {
       name
     }

# Whether the LSC credential is in the trashcan.
get_targets_response_target_smb_lsc_credential_trash
 = element trash
     {
       boolean
     }

# Port range of the target.
get_targets_response_target_port_range
 = element port_range
     {
       name
     }

get_targets_response_target_port_list
 = element port_list
     {
       attribute id { uuid }
       & get_targets_response_target_port_list_name
       & get_targets_response_target_port_list_trash
     }

# The name of the port_list.
get_targets_response_target_port_list_name
 = element name
     {
       name
     }

# Whether the port_list is in the trashcan.
get_targets_response_target_port_list_trash
 = element trash
     {
       boolean
     }

# All tasks using the target.
get_targets_response_target_tasks
 = element tasks
     {
       get_targets_response_target_tasks_task*
     }

get_targets_response_target_tasks_task
 = element task
     {
       attribute id { uuid }
       & get_targets_response_target_tasks_task_name
     }

# The name of the task.
get_targets_response_target_tasks_task_name
 = element name
     {
       name
     }

get_targets_response_filters
 = element filters
     {
       # UUID of filter if any, else 0.
       attribute id { uuid }
       & get_targets_response_filters_term
     }

# Filter term.
get_targets_response_filters_term
 = element term
     {
       text
     }

get_targets_response_sort
 = element sort
     {
       text
       & get_targets_response_sort_field
     }

get_targets_response_sort_field
 = element field
     {
       get_targets_response_sort_field_order
     }

get_targets_response_sort_field_order
 = element order
     {
       xsd:token { pattern = "ascending|descending" }
     }

get_targets_response_targets
 = element targets
     {
       # First target.
       attribute start {  }
       & # Maximum number of targets.
       attribute max {  }
     }

get_targets_response_target_count
 = element target_count
     {
       get_targets_response_target_count_filtered
       & get_targets_response_target_count_page
     }

# Number of targets after filtering.
get_targets_response_target_count_filtered
 = element filtered
     {
       integer
     }

# Number of targets on current page.
get_targets_response_target_count_page
 = element page
     {
       integer
     }

## Response to get_tasks

get_tasks_response
 = element get_tasks_response
     {
       attribute status { status }
       & attribute status_text { text }
       & get_tasks_response_task_count
       & get_tasks_response_sort
       & get_tasks_response_apply_overrides
       & get_tasks_response_task*
     }

get_tasks_response_task_count
 = element task_count
     {
       integer
     }

get_tasks_response_sort
 = element sort
     {
       get_tasks_response_sort_field*
     }

get_tasks_response_sort_field
 = element field
     {
       text
       & get_tasks_response_sort_field_order
     }

get_tasks_response_sort_field_order
 = element order
     {
       xsd:token { pattern = "ascending|descending" }
     }

get_tasks_response_apply_overrides
 = element apply_overrides
     {
       xsd:token { pattern = "0|1" }
     }

get_tasks_response_task
 = element task
     {
       get_tasks_response_task_name
       & get_tasks_response_task_comment
       & get_tasks_response_task_creation_time
       & get_tasks_response_task_modification_time
       & get_tasks_response_task_writable
       & get_tasks_response_task_in_use
       & get_tasks_response_task_owner
       & get_tasks_response_task_status
       & get_tasks_response_task_progress
       & get_tasks_response_task_config
       & get_tasks_response_task_target
       & get_tasks_response_task_alert
       & get_tasks_response_task_observers
       & get_tasks_response_task_schedule
       & get_tasks_response_task_slave
       & get_tasks_response_task_report_count
       & get_tasks_response_task_trend
       & get_tasks_response_task_first_report?
       & get_tasks_response_task_last_report?
       & get_tasks_response_task_second_last_report?
       & get_tasks_response_task_rcfile?
       & get_tasks_response_task_reports*
       & get_tasks_response_task_preferences
     }

# The name of the task.
get_tasks_response_task_name
 = element name
     {
       name
     }

# The comment on the task.
get_tasks_response_task_comment
 = element comment
     {
       text
     }

# Creation time of the task.
get_tasks_response_task_creation_time
 = element creation_time
     {
       iso_time
     }

# Last time the task was modified.
get_tasks_response_task_modification_time
 = element modification_time
     {
       iso_time
     }

# Whether the task is writable.
get_tasks_response_task_writable
 = element writable
     {
       boolean
     }

# Whether this task is currently in use.
get_tasks_response_task_in_use
 = element in_use
     {
       boolean
     }

# The run status of the task.
get_tasks_response_task_status
 = element status
     {
       task_status
     }

# The percentage of the task that is complete.
get_tasks_response_task_progress
 = element progress
     {
       text # RNC limitation: integer
       & get_tasks_response_task_progress_host_progress*
     }

# Percentage complete for a particular host.
get_tasks_response_task_progress_host_progress
 = element host_progress
     {
       text # RNC limitation: integer
       & get_tasks_response_task_progress_host_progress_host
     }

get_tasks_response_task_progress_host_progress_host
 = element host
     {
       text
     }

# Owner of the task.
get_tasks_response_task_owner
 = element owner
     {
       get_tasks_response_task_owner_name
     }

# The name of the owner.
get_tasks_response_task_owner_name
 = element name
     {
       name
     }

# The scan configuration used by the task.
get_tasks_response_task_config
 = element config
     {
       attribute id { uuid }
       & get_tasks_response_task_config_name
       & get_tasks_response_task_config_trash
     }

# The name of the config.
get_tasks_response_task_config_name
 = element name
     {
       name
     }

# Whether the config is in the trashcan.
get_tasks_response_task_config_trash
 = element trash
     {
       boolean
     }

# The hosts scanned by the task.
get_tasks_response_task_target
 = element target
     {
       attribute id { uuid }
       & get_tasks_response_task_target_name
       & get_tasks_response_task_target_trash
     }

# The name of the target.
get_tasks_response_task_target_name
 = element name
     {
       name
     }

# Whether the target is in the trashcan.
get_tasks_response_task_target_trash
 = element trash
     {
       boolean
     }

# An alert that applies to the task.
get_tasks_response_task_alert
 = element alert
     {
       attribute id { uuid_or_empty }
       & get_tasks_response_task_alert_name
       & get_tasks_response_task_alert_trash
     }

# The name of the alert.
get_tasks_response_task_alert_name
 = element name
     {
       name
     }

# Whether the alert is in the trashcan.
get_tasks_response_task_alert_trash
 = element trash
     {
       boolean
     }

# Users allowed to observe this task.
get_tasks_response_task_observers
 = element observers
     {
       user_list
     }

# When the task will run.
get_tasks_response_task_schedule
 = element schedule
     {
       attribute id { uuid_or_empty }
       & get_tasks_response_task_schedule_name
       & get_tasks_response_task_schedule_trash
     }

# The name of the schedule.
get_tasks_response_task_schedule_name
 = element name
     {
       name
     }

# Whether the schedule is in the trashcan.
get_tasks_response_task_schedule_trash
 = element trash
     {
       boolean
     }

# The slave that the task will run on.
get_tasks_response_task_slave
 = element slave
     {
       attribute id { uuid }
       & get_tasks_response_task_slave_name
       & get_tasks_response_task_slave_trash
     }

# The name of the slave.
get_tasks_response_task_slave_name
 = element name
     {
       name
     }

# Whether the slave is in the trashcan.
get_tasks_response_task_slave_trash
 = element trash
     {
       boolean
     }

# Number of reports.
get_tasks_response_task_report_count
 = element report_count
     {
       text # RNC limitation: integer
       & get_tasks_response_task_report_count_finished
     }

# Number of reports where the scan completed.
get_tasks_response_task_report_count_finished
 = element finished
     {
       integer
     }

get_tasks_response_task_trend
 = element trend
     {
       task_trend
     }

get_tasks_response_task_first_report
 = element first_report
     {
       get_tasks_response_task_first_report_report
     }

get_tasks_response_task_first_report_report
 = element report
     {
       attribute id { uuid }
       & get_tasks_response_task_first_report_report_timestamp
       & get_tasks_response_task_first_report_report_result_count
     }

get_tasks_response_task_first_report_report_timestamp
 = element timestamp
     {
       iso_time
     }

# Result counts for this report.
get_tasks_response_task_first_report_report_result_count
 = element result_count
     {
       get_tasks_response_task_first_report_report_result_count_debug
       & get_tasks_response_task_first_report_report_result_count_log
       & get_tasks_response_task_first_report_report_result_count_info
       & get_tasks_response_task_first_report_report_result_count_warning
       & get_tasks_response_task_first_report_report_result_count_hole
     }

get_tasks_response_task_first_report_report_result_count_debug
 = element debug
     {
       integer
     }

get_tasks_response_task_first_report_report_result_count_log
 = element log
     {
       integer
     }

get_tasks_response_task_first_report_report_result_count_info
 = element info
     {
       integer
     }

get_tasks_response_task_first_report_report_result_count_warning
 = element warning
     {
       integer
     }

get_tasks_response_task_first_report_report_result_count_hole
 = element hole
     {
       integer
     }

get_tasks_response_task_last_report
 = element last_report
     {
       get_tasks_response_task_last_report_report
     }

get_tasks_response_task_last_report_report
 = element report
     {
       attribute id { uuid }
       & get_tasks_response_task_last_report_report_timestamp
       & get_tasks_response_task_last_report_report_result_count
     }

get_tasks_response_task_last_report_report_timestamp
 = element timestamp
     {
       iso_time
     }

# Result counts for this report.
get_tasks_response_task_last_report_report_result_count
 = element result_count
     {
       get_tasks_response_task_last_report_report_result_count_debug
       & get_tasks_response_task_last_report_report_result_count_log
       & get_tasks_response_task_last_report_report_result_count_info
       & get_tasks_response_task_last_report_report_result_count_warning
       & get_tasks_response_task_last_report_report_result_count_hole
     }

get_tasks_response_task_last_report_report_result_count_debug
 = element debug
     {
       integer
     }

get_tasks_response_task_last_report_report_result_count_log
 = element log
     {
       integer
     }

get_tasks_response_task_last_report_report_result_count_info
 = element info
     {
       integer
     }

get_tasks_response_task_last_report_report_result_count_warning
 = element warning
     {
       integer
     }

get_tasks_response_task_last_report_report_result_count_hole
 = element hole
     {
       integer
     }

get_tasks_response_task_second_last_report
 = element second_last_report
     {
       get_tasks_response_task_second_last_report_report
     }

get_tasks_response_task_second_last_report_report
 = element report
     {
       attribute id { uuid }
       & get_tasks_response_task_second_last_report_report_timestamp
       & get_tasks_response_task_second_last_report_report_result_count
     }

get_tasks_response_task_second_last_report_report_timestamp
 = element timestamp
     {
       iso_time
     }

# Result counts for this report.
get_tasks_response_task_second_last_report_report_result_count
 = element result_count
     {
       get_tasks_response_task_second_last_report_report_result_count_debug
       & get_tasks_response_task_second_last_report_report_result_count_log
       & get_tasks_response_task_second_last_report_report_result_count_info
       & get_tasks_response_task_second_last_report_report_result_count_warning
       & get_tasks_response_task_second_last_report_report_result_count_hole
     }

get_tasks_response_task_second_last_report_report_result_count_debug
 = element debug
     {
       integer
     }

get_tasks_response_task_second_last_report_report_result_count_log
 = element log
     {
       integer
     }

get_tasks_response_task_second_last_report_report_result_count_info
 = element info
     {
       integer
     }

get_tasks_response_task_second_last_report_report_result_count_warning
 = element warning
     {
       integer
     }

get_tasks_response_task_second_last_report_report_result_count_hole
 = element hole
     {
       integer
     }

get_tasks_response_task_rcfile
 = element rcfile
     {
       base64
     }

get_tasks_response_task_reports
 = element reports
     {
       get_tasks_response_task_reports_report*
     }

get_tasks_response_task_reports_report
 = element report
     {
       attribute id { uuid }
       & get_tasks_response_task_reports_report_timestamp
       & get_tasks_response_task_reports_report_scan_run_status
       & get_tasks_response_task_reports_report_result_count
     }

get_tasks_response_task_reports_report_timestamp
 = element timestamp
     {
       iso_time
     }

# Run status of task scan.
get_tasks_response_task_reports_report_scan_run_status
 = element scan_run_status
     {
       task_status
     }

# Result counts for this report.
get_tasks_response_task_reports_report_result_count
 = element result_count
     {
       get_tasks_response_task_reports_report_result_count_debug
       & get_tasks_response_task_reports_report_result_count_log
       & get_tasks_response_task_reports_report_result_count_info
       & get_tasks_response_task_reports_report_result_count_warning
       & get_tasks_response_task_reports_report_result_count_hole
     }

get_tasks_response_task_reports_report_result_count_debug
 = element debug
     {
       integer
     }

get_tasks_response_task_reports_report_result_count_log
 = element log
     {
       integer
     }

get_tasks_response_task_reports_report_result_count_info
 = element info
     {
       integer
     }

get_tasks_response_task_reports_report_result_count_warning
 = element warning
     {
       integer
     }

get_tasks_response_task_reports_report_result_count_hole
 = element hole
     {
       integer
     }

get_tasks_response_task_preferences
 = element preferences
     {
       get_tasks_response_task_preferences_preference*
     }

get_tasks_response_task_preferences_preference
 = element preference
     {
       get_tasks_response_task_preferences_preference_name
       & get_tasks_response_task_preferences_preference_scanner_name
       & get_tasks_response_task_preferences_preference_value
     }

# Full name of preference, suitable for end users.
get_tasks_response_task_preferences_preference_name
 = element name
     {
       text
     }

# Compact name of preference, from scanner.
get_tasks_response_task_preferences_preference_scanner_name
 = element scanner_name
     {
       text
     }

get_tasks_response_task_preferences_preference_value
 = element value
     {
       text
     }

## Response to get_version

get_version_response
 = element get_version_response
     {
       attribute status { status }
       & attribute status_text { text }
       & get_version_response_version
     }

get_version_response_version
 = element version
     {
       text
     }

## Response to help

help_response
 = element help_response
     {
       text
       & attribute status { status }
       & attribute status_text { text }
       & help_response_schema?
     }

help_response_schema
 = element schema
     {
       help_response_schema_protocol
     }

help_response_schema_protocol
 = element protocol
     {
       help_response_schema_protocol_name
       & help_response_schema_protocol_abbreviation?
       & help_response_schema_protocol_summary?
       & help_response_schema_protocol_version?
       & help_response_schema_protocol_type*
       & help_response_schema_protocol_command*
     }

# The full name of the protocol.
help_response_schema_protocol_name
 = element name
     {
       text
     }

# The abbreviated name of the protocol.
help_response_schema_protocol_abbreviation
 = element abbreviation
     {
       text
     }

# A summary of the protocol.
help_response_schema_protocol_summary
 = element summary
     {
       text
     }

# The version number of the protocol.
help_response_schema_protocol_version
 = element version
     {
       text
     }

# A data type.
help_response_schema_protocol_type
 = element type
     {
       help_response_schema_protocol_type_name
       & help_response_schema_protocol_type_summary?
       & help_response_schema_protocol_type_description?
       & help_response_schema_protocol_type_pattern
     }

# The name of the data type.
help_response_schema_protocol_type_name
 = element name
     {
       type_name
     }

# A summary of the data type.
help_response_schema_protocol_type_summary
 = element summary
     {
       text
     }

# A description of the data type.
help_response_schema_protocol_type_description
 = element description
     {
       text
       & help_response_schema_protocol_type_description_p*
     }

# A paragraph.
help_response_schema_protocol_type_description_p
 = element p
     {
       text
     }

# The RNC pattern for the data type.
help_response_schema_protocol_type_pattern
 = element pattern
     {
       text
     }

# A command.
help_response_schema_protocol_command
 = element command    # type command_definition
     {
       command_definition_name
       & command_definition_summary?
       & command_definition_description?
       & ( ( command_definition_pattern
           & command_definition_response )
           | ( command_definition_type
           & command_definition_ele* ) )
       & command_definition_example*
     }

## Response to modify_agent

modify_agent_response
 = element modify_agent_response
     {
       attribute status { status }
       & attribute status_text { text }
     }

## Response to modify_alert

modify_alert_response
 = element modify_alert_response
     {
       attribute status { status }
       & attribute status_text { text }
     }

## Response to modify_config

modify_config_response
 = element modify_config_response
     {
       attribute status { status }
       & attribute status_text { text }
     }

## Response to modify_filter

modify_filter_response
 = element modify_filter_response
     {
       attribute status { status }
       & attribute status_text { text }
     }

## Response to modify_lsc_credential

modify_lsc_credential_response
 = element modify_lsc_credential_response
     {
       attribute status { status }
       & attribute status_text { text }
     }

## Response to modify_note

modify_note_response
 = element modify_note_response
     {
       attribute status { status }
       & attribute status_text { text }
     }

## Response to modify_override

modify_override_response
 = element modify_override_response
     {
       attribute status { status }
       & attribute status_text { text }
     }

## Response to modify_port_list

modify_port_list_response
 = element modify_port_list_response
     {
       attribute status { status }
       & attribute status_text { text }
     }

## Response to modify_report

modify_report_response
 = element modify_report_response
     {
       attribute status { status }
       & attribute status_text { text }
     }

## Response to modify_report_format

modify_report_format_response
 = element modify_report_format_response
     {
       attribute status { status }
       & attribute status_text { text }
     }

## Response to modify_schedule

modify_schedule_response
 = element modify_schedule_response
     {
       attribute status { status }
       & attribute status_text { text }
     }

## Response to modify_setting

modify_setting_response
 = element modify_setting_response
     {
       attribute status { status }
       & attribute status_text { text }
     }

## Response to modify_slave

modify_slave_response
 = element modify_slave_response
     {
       attribute status { status }
       & attribute status_text { text }
     }

## Response to modify_target

modify_target_response
 = element modify_target_response
     {
       attribute status { status }
       & attribute status_text { text }
     }

## Response to modify_task

modify_task_response
 = element modify_task_response
     {
       attribute status { status }
       & attribute status_text { text }
     }

## Response to pause_task

pause_task_response
 = element pause_task_response
     {
       attribute status { status }
       & attribute status_text { text }
     }

## Response to restore

restore_response
 = element restore_response
     {
       attribute status { status }
       & attribute status_text { text }
     }

## Response to resume_or_start_task

resume_or_start_task_response
 = element resume_or_start_task_response
     {
       attribute status { status }
       & attribute status_text { text }
     }

## Response to resume_paused_task

resume_paused_task_response
 = element resume_paused_task_response
     {
       attribute status { status }
       & attribute status_text { text }
     }

## Response to resume_stopped_task

resume_stopped_task_response
 = element resume_stopped_task_response
     {
       attribute status { status }
       & attribute status_text { text }
     }

## Response to run_wizard

run_wizard_response
 = element run_wizard_response
     {
       attribute status { status }
       & attribute status_text { text }
     }

## Response to start_task

start_task_response
 = element start_task_response
     {
       attribute status { status }
       & attribute status_text { text }
     }

## Response to stop_task

stop_task_response
 = element stop_task_response
     {
       attribute status { status }
       & attribute status_text { text }
     }

## Response to test_alert

test_alert_response
 = element test_alert_response
     {
       attribute status { status }
       & attribute status_text { text }
     }

## Response to verify_agent

verify_agent_response
 = element verify_agent_response
     {
       attribute status { status }
       & attribute status_text { text }
     }

## Response to verify_report_format

verify_report_format_response
 = element verify_report_format_response
     {
       attribute status { status }
       & attribute status_text { text }
     }
